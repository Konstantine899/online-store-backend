# CI/CD Pipeline Documentation

## Обзор

Проект использует GitHub Actions для автоматизации проверок качества кода, тестирования и деплоя.

---

## Pipeline Structure

### Workflow: `ci.yml`

Запускается на:
- Pull Requests в ветки `main`, `develop`
- Push в ветки `main`, `develop`

---

## Jobs (этапы пайплайна)

### 1. **Lint** (проверка качества кода)

**Цель:** Проверить код на соответствие стандартам ESLint.

**Команда:** `npm run lint:ts`

**Проверяет:**
- Отсутствие `any` типов (strict mode)
- Неиспользуемые переменные
- Правила кодстайла (import order, naming conventions)
- Потенциальные баги (no-explicit-any, no-unused-vars)

**Локальное воспроизведение:**
```bash
npm run lint:ts
npm run lint:ts:fix  # Автоматическое исправление
```

**Время выполнения:** ~30 секунд

---

### 2. **Build** (сборка приложения)

**Цель:** Проверить что TypeScript код компилируется без ошибок.

**Команда:** `npm run build`

**Проверяет:**
- Типовые ошибки TypeScript
- Отсутствие синтаксических ошибок
- Корректность путей импортов
- Конфигурация tsconfig.json

**Артефакты:** `dist/` (сохраняется на 7 дней)

**Локальное воспроизведение:**
```bash
npm run build
```

**Время выполнения:** ~45 секунд

---

### 3. **Test Unit** (юнит-тесты)

**Цель:** Запустить быстрые unit-тесты без БД.

**Команда:** `npm run test:unit`

**Покрывает:**
- Guards (BruteforceGuard, RoleGuard, AuthGuard)
- Strategies (JwtStrategy)
- Middleware (CorrelationIdMiddleware)
- Validators (IsValidName, IsPasswordStrong, etc.)
- Services (мокированные зависимости)
- Utils (logger.factory, cookie-options)

**Локальное воспроизведение:**
```bash
npm run test:unit
npm run test:unit:watch  # Watch mode для разработки
```

**Время выполнения:** ~20 секунд

---

### 4. **Test Integration** (интеграционные тесты)

**Цель:** Запустить E2E тесты с реальной БД.

**Зависимости:**
- MySQL 8.0 service
- Database migrations applied
- Database seeds applied

**Команда:** `npm run test:integration`

**Покрывает:**
- Auth flow (registration → login → refresh → logout)
- RBAC (role-based access control)
- Security headers (CORS, Helmet, CSP)
- Input validation
- Brute-force protection

**Локальное воспроизведение:**
```bash
# 1. Запустить MySQL (Docker)
docker run -d --name mysql-test \
  -e MYSQL_ROOT_PASSWORD=test_root_password \
  -e MYSQL_DATABASE=online_store_test \
  -e MYSQL_USER=test_user \
  -e MYSQL_PASSWORD=test_password \
  -p 3306:3306 mysql:8.0

# 2. Применить миграции и сиды
npm run db:migrate:test
npm run db:seed:test

# 3. Запустить тесты
npm run test:integration

# 4. Очистка
docker stop mysql-test && docker rm mysql-test
```

**Время выполнения:** ~1 минута 30 секунд

---

### 5. **Coverage** (покрытие кода тестами)

**Цель:** Проверить что coverage ≥70% (global threshold).

**Команда:** `npm run test:cov`

**Thresholds (настроены в jest.config.js):**
```javascript
coverageThreshold: {
  global: {
    branches: 70,
    functions: 70,
    lines: 70,
    statements: 70
  }
}
```

**Критичные модули (должны быть ≥80%):**
- BruteforceGuard: 95%+ ✅
- RoleGuard: 100% ✅
- JwtStrategy: 92%+ ✅
- CorrelationIdMiddleware: 100% ✅
- AuthService: 97%+ ✅
- TokenService: 96%+ ✅

**Артефакты:** Coverage report HTML (сохраняется на 30 дней)

**Локальное воспроизведение:**
```bash
npm run test:cov
npm run test:cov:open  # Открыть HTML отчёт
```

**Время выполнения:** ~2 минуты

---

### 6. **Migration Check** (проверка миграций)

**Цель:** Убедиться что миграции можно применить и откатить.

**Команды:**
1. `npm run db:migrate:test` - применение всех миграций
2. `npm run db:migrate:undo:test` - откат последней миграции
3. `npm run db:migrate:test` - повторное применение

**Проверяет:**
- SQL синтаксис корректен
- `up` миграции работают
- `down` миграции работают (rollback)
- Нет конфликтов/дубликатов
- Foreign keys корректны

**Локальное воспроизведение:**
```bash
npm run db:migrate:test
npm run db:migrate:status:test
npm run db:migrate:undo:test
npm run db:migrate:test
```

**Время выполнения:** ~30 секунд

---

### 7. **All Checks Passed** (финальная проверка)

**Цель:** Агрегировать статусы всех jobs.

**Логика:**
- Проверяет что ВСЕ предыдущие jobs завершились успешно
- Если хотя бы один failed → job failed
- Используется как required status check для merge

**Всегда запускается** (`if: always()`), даже если предыдущие jobs упали.

---

## Environment Variables

### Секреты для CI (GitHub Secrets):

**Не требуются для текущего пайплайна** - все тестовые секреты hardcoded в workflow.

В production CI потребуются:
- `DB_HOST`, `DB_PORT`, `DB_NAME`, `DB_USER`, `DB_PASS`
- `JWT_ACCESS_SECRET`, `JWT_REFRESH_SECRET`
- `COOKIE_PARSER_SECRET_KEY`
- `ALLOWED_ORIGINS` (для CORS)

### Тестовые секреты:

Используются в CI (hardcoded):
```yaml
JWT_ACCESS_SECRET: test-secret-key-for-ci-pipeline-access-token-32chars
JWT_REFRESH_SECRET: test-secret-key-for-ci-pipeline-refresh-token-32chars
COOKIE_PARSER_SECRET_KEY: test-cookie-parser-secret-key-for-ci-pipeline-min-32-chars
```

**Важно:** Эти секреты ТОЛЬКО для тестов, не использовать в production!

---

## Branch Protection Rules

### Настройки для `main` ветки:

**Require pull request reviews:**
- ✅ Minimum 1 reviewer approval
- ✅ Dismiss stale reviews when new commits pushed

**Require status checks:**
- ✅ `lint` - должен пройти
- ✅ `build` - должен пройти
- ✅ `test-unit` - должен пройти
- ✅ `test-integration` - должен пройти
- ✅ `coverage` - должен пройти
- ✅ `migration-check` - должен пройти
- ✅ `all-checks-passed` - должен пройти

**Other settings:**
- ✅ Require branches to be up to date before merging
- ✅ Require linear history (squash merge preferred)
- ❌ Allow force pushes (запрещено)
- ❌ Allow deletions (запрещено)

---

## Troubleshooting

### Проблема: Lint failed

**Симптом:**
```
ESLint found 5 errors
```

**Решение:**
```bash
# Локально проверить ошибки
npm run lint:ts

# Автоматически исправить (если возможно)
npm run lint:ts:fix

# Проверить снова
npm run lint:ts
```

---

### Проблема: Build failed

**Симптом:**
```
TS2304: Cannot find name 'SomeType'
```

**Решение:**
```bash
# Локально собрать проект
npm run build

# Проверить tsconfig.json
# Проверить импорты (@app/* алиасы)
# Исправить ошибки TypeScript
```

---

### Проблема: Unit tests failed

**Симптом:**
```
FAIL tests/unit/guards/role.guard.unit.test.ts
● RoleGuard › should allow access for valid role
```

**Решение:**
```bash
# Запустить локально
npm run test:unit

# Watch mode для дебага
npm run test:unit:watch

# Проверить моки и типы
# Исправить тесты
```

---

### Проблема: Integration tests failed

**Симптом:**
```
MySQL connection refused
ECONNREFUSED 127.0.0.1:3306
```

**Решение:**
1. Проверить что MySQL service запущен в CI
2. Проверить health check settings
3. Локально:
```bash
# Убедиться что MySQL запущен
docker ps | grep mysql

# Проверить .test.env конфигурацию
cat .test.env

# Запустить миграции
npm run db:migrate:test

# Запустить тесты
npm run test:integration
```

---

### Проблема: Coverage below threshold

**Симптом:**
```
Jest: "global" coverage threshold for branches (70%) not met: 65.5%
```

**Решение:**
```bash
# Проверить текущее покрытие
npm run test:cov

# Посмотреть HTML отчёт
npm run test:cov:open

# Найти непокрытые ветки (branches)
# Добавить тесты для критичных модулей
# Проверить снова
npm run test:cov
```

---

### Проблема: Migrations failed

**Симптом:**
```
ERROR: Table 'user' already exists
```

**Решение:**
```bash
# Проверить статус миграций
npm run db:migrate:status:test

# Откатить все
npm run db:migrate:undo:all:test

# Применить снова
npm run db:migrate:test

# Проверить что rollback работает
npm run db:migrate:undo:test
npm run db:migrate:test
```

---

## Performance Optimization

### Кэширование npm зависимостей

**Использование:**
```yaml
- uses: actions/setup-node@v4
  with:
    cache: 'npm'  # ← Автоматическое кэширование node_modules
```

**Результат:** ~2 минуты экономии на каждом запуске

---

### Параллельные jobs

**Стратегия:**
```
lint (30s)
  ├── build (45s) [parallel]
  ├── test-unit (20s) [parallel]
  └── migration-check (30s) [parallel]

test-integration (90s) [after test-unit]

coverage (120s) [after test-unit + test-integration]

all-checks-passed [after all]
```

**Общее время:** ~3-4 минуты (вместо 6+ минут последовательно)

---

### MySQL health check

**Настройка:**
```yaml
services:
  mysql:
    options: >-
      --health-cmd="mysqladmin ping"
      --health-interval=10s
      --health-timeout=5s
      --health-retries=3
```

**Результат:** MySQL готов к подключению до запуска тестов

---

## Локальная симуляция CI

### Полный цикл проверок (как в CI):

```bash
# 1. Lint
npm run lint:ts

# 2. Build
npm run build

# 3. Unit tests
npm run test:unit

# 4. Подготовка БД для integration tests
docker run -d --name mysql-ci-test \
  -e MYSQL_ROOT_PASSWORD=test_root_password \
  -e MYSQL_DATABASE=online_store_test \
  -e MYSQL_USER=test_user \
  -e MYSQL_PASSWORD=test_password \
  -p 3306:3306 mysql:8.0

# Подождать пока MySQL стартует
sleep 10

# 5. Миграции
npm run db:migrate:test

# 6. Сиды
npm run db:seed:test

# 7. Integration tests
npm run test:integration

# 8. Coverage
npm run test:cov

# 9. Очистка
docker stop mysql-ci-test && docker rm mysql-ci-test
```

**Скрипт для одной команды:**
```bash
#!/bin/bash
# scripts/ci-local.sh
set -e

echo "🔍 Running lint..."
npm run lint:ts

echo "🏗️ Building..."
npm run build

echo "✅ Running unit tests..."
npm run test:unit

echo "🐳 Starting MySQL..."
docker run -d --name mysql-ci-test \
  -e MYSQL_ROOT_PASSWORD=test_root_password \
  -e MYSQL_DATABASE=online_store_test \
  -e MYSQL_USER=test_user \
  -e MYSQL_PASSWORD=test_password \
  -p 3306:3306 mysql:8.0

echo "⏳ Waiting for MySQL..."
sleep 15

echo "📦 Running migrations..."
npm run db:migrate:test

echo "🌱 Seeding database..."
npm run db:seed:test

echo "🧪 Running integration tests..."
npm run test:integration

echo "📊 Generating coverage..."
npm run test:cov

echo "🧹 Cleanup..."
docker stop mysql-ci-test && docker rm mysql-ci-test

echo "🎉 All CI checks passed locally!"
```

---

## Метрики производительности

### Целевые показатели:

| Job | Target | Current |
|-----|--------|---------|
| Lint | < 1 min | ~30s ✅ |
| Build | < 1 min | ~45s ✅ |
| Unit Tests | < 1 min | ~20s ✅ |
| Integration Tests | < 2 min | ~90s ✅ |
| Coverage | < 3 min | ~120s ✅ |
| Migration Check | < 1 min | ~30s ✅ |
| **Total Pipeline** | **< 5 min** | **~4 min** ✅ |

---

## Coverage Thresholds

### Global (минимум для всего проекта):

```javascript
global: {
  branches: 70%,
  functions: 70%,
  lines: 70%,
  statements: 70%
}
```

**Блокировка:** Если coverage падает ниже 70% → CI failed → merge запрещён

### Critical Modules (ожидается ≥80%):

- `BruteforceGuard`: 95%+ ✅
- `RoleGuard`: 100% ✅
- `JwtStrategy`: 92%+ ✅
- `CorrelationIdMiddleware`: 100% ✅
- `AuthService`: 97%+ ✅
- `TokenService`: 96%+ ✅
- `UserService`: 89%+ ✅

**Мониторинг:** Coverage отчёт сохраняется как артефакт на 30 дней

---

## Pull Request Process

### 1. Создание PR

```bash
# Создать feature ветку
git checkout -b feature/auth/add-2fa

# Внести изменения
# ...

# Закоммитить
git add .
git commit -m "feat(auth): add two-factor authentication"

# Push
git push origin feature/auth/add-2fa

# Создать PR в GitHub UI
```

### 2. Автоматические проверки

После создания PR автоматически запускается CI:

```
✓ lint             (30s)
✓ build            (45s)
✓ test-unit        (20s)
✓ test-integration (90s)
✓ coverage         (120s)
✓ migration-check  (30s)
✓ all-checks-passed
```

### 3. Code Review

**Reviewers:** Минимум 1 approver

**Checklist:**
- [ ] Код соответствует code-style правилам
- [ ] Добавлены тесты для новой функциональности
- [ ] Coverage не просел (особенно для критичных модулей)
- [ ] Swagger документация обновлена
- [ ] Миграции имеют корректный `down`
- [ ] Нет секретов в коде
- [ ] Логирование без PII
- [ ] Русские сообщения об ошибках

### 4. Merge

**Стратегия:** Squash and merge (по умолчанию)

**Требования:**
- ✅ Все CI checks passed
- ✅ Минимум 1 approval
- ✅ Branch up-to-date с main
- ✅ No merge conflicts

**После merge:**
- Feature ветка автоматически удаляется
- CI запускается на main
- Coverage обновляется

---

## Deployment (будущее)

### Staging

**Триггер:** Push в `develop` ветку

**План (TODO):**
```yaml
deploy-staging:
  if: github.ref == 'refs/heads/develop'
  needs: [all-checks-passed]
  steps:
    - Deploy to staging environment
    - Run smoke tests
    - Notify team (Slack/Telegram)
```

### Production

**Триггер:** Push tag `v*.*.*`

**План (TODO):**
```yaml
deploy-production:
  if: startsWith(github.ref, 'refs/tags/v')
  needs: [all-checks-passed]
  steps:
    - Deploy to production
    - Run smoke tests
    - Create GitHub Release
    - Notify team
```

---

## Notifications

### Failed CI

**Текущее:** GitHub UI + email notifications

**Будущее (опционально):**
- Slack webhook для команды
- Telegram bot notifications
- Discord integration

---

## Maintenance

### Регулярные задачи:

**Еженедельно:**
- Проверить coverage trends (не падает ли)
- Проверить время выполнения pipeline (не растёт ли)
- Очистить старые artifacts

**Ежемесячно:**
- Обновить GitHub Actions versions (dependabot)
- Проверить MySQL image version
- Оптимизировать медленные тесты

**При релизе:**
- Проверить что все checks green
- Проверить что миграции применяются на staging
- Backup БД перед применением миграций на production

---

## Best Practices

### ✅ DO:

- Запускать `npm run lint:ts` перед каждым commit
- Запускать `npm run test:unit` локально перед push
- Проверять что миграции можно откатить
- Использовать `npm ci` в CI (не `npm install`)
- Кэшировать node_modules в CI
- Держать пайплайн быстрым (< 5 минут)

### ❌ DON'T:

- Не пушить без lint проверки
- Не мерджить с failing tests
- Не использовать `--no-verify` в git hooks
- Не игнорировать coverage падение
- Не хардкодить production секреты в workflow
- Не skip проверок для "срочных" фиксов

---

## Contacts

**Вопросы по CI/CD:**
- Документация: `docs/ci-cd.mdc`
- GitHub Actions docs: https://docs.github.com/actions
- Jest coverage: https://jestjs.io/docs/configuration#coveragethreshold

**Проблемы:**
- Создать issue с тегом `ci/cd`
- Описать: что упало, логи, воспроизведение

---

## Changelog

### 2025-10-07 - SEC-010
- ✅ Создан основной CI пайплайн
- ✅ Добавлены проверки: lint, build, test, coverage, migrations
- ✅ Настроен MySQL service для integration tests
- ✅ Coverage thresholds: 70% global
- ✅ Документация создана

---

**CI/CD pipeline готов к использованию!** 🚀
