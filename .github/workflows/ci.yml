name: CI Pipeline

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint:ts

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test-unit]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: online_store_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo 'waiting for mysql...'
            sleep 2
          done

      - name: Run database migrations
        run: npm run db:migrate:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Run database seeds
        run: npm run db:seed:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Run integration tests
        run: npm run test:integration
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test
          JWT_ACCESS_SECRET: test-secret-key-for-ci-pipeline-access-token-32chars
          JWT_REFRESH_SECRET: test-secret-key-for-ci-pipeline-refresh-token-32chars
          JWT_ACCESS_TTL: 15m
          JWT_REFRESH_TTL: 30d
          COOKIE_PARSER_SECRET_KEY: test-cookie-parser-secret-key-for-ci-pipeline-min-32-chars
          RATE_LIMIT_ENABLED: 'true'
          RATE_LIMIT_LOGIN_ATTEMPTS: '5'
          RATE_LIMIT_LOGIN_WINDOW: '15m'
          RATE_LIMIT_REFRESH_ATTEMPTS: '10'
          RATE_LIMIT_REFRESH_WINDOW: '5m'
          RATE_LIMIT_REG_ATTEMPTS: '3'
          RATE_LIMIT_REG_WINDOW: '1m'

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: online_store_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo 'waiting for mysql...'
            sleep 2
          done

      - name: Run database migrations
        run: npm run db:migrate:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Run database seeds
        run: npm run db:seed:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Generate coverage report
        run: npm run test:cov
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test
          JWT_ACCESS_SECRET: test-secret-key-for-ci-pipeline-access-token-32chars
          JWT_REFRESH_SECRET: test-secret-key-for-ci-pipeline-refresh-token-32chars
          JWT_ACCESS_TTL: 15m
          JWT_REFRESH_TTL: 30d
          COOKIE_PARSER_SECRET_KEY: test-cookie-parser-secret-key-for-ci-pipeline-min-32-chars
          RATE_LIMIT_ENABLED: 'true'

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check coverage thresholds
        run: |
          echo "Coverage thresholds checked by Jest (70% minimum)"
          if [ $? -ne 0 ]; then
            echo "Coverage below threshold!"
            exit 1
          fi

  migration-check:
    name: Database Migrations Check
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_root_password
          MYSQL_DATABASE: online_store_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Wait for MySQL
        run: |
          until mysqladmin ping -h 127.0.0.1 -P 3306 --silent; do
            echo 'waiting for mysql...'
            sleep 2
          done

      - name: Check migrations can be applied
        run: npm run db:migrate:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Check migrations can be rolled back
        run: npm run db:migrate:undo:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

      - name: Re-apply migrations
        run: npm run db:migrate:test
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: online_store_test
          DB_USER: test_user
          DB_PASS: test_password
          NODE_ENV: test

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, build, test-unit, test-integration, coverage, migration-check]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [ "${{ needs.lint.result }}" != "success" ] || \
             [ "${{ needs.build.result }}" != "success" ] || \
             [ "${{ needs.test-unit.result }}" != "success" ] || \
             [ "${{ needs.test-integration.result }}" != "success" ] || \
             [ "${{ needs.coverage.result }}" != "success" ] || \
             [ "${{ needs.migration-check.result }}" != "success" ]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"

