window.jest_html_reporters_callback__({"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":1,"numPassedTests":30,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":1,"numTotalTests":30,"startTime":1759773233758,"success":false,"testResults":[{"numFailingTests":0,"numPassingTests":30,"numPendingTests":0,"numTodoTests":0,"perfStats":{"end":1759773241425,"loadTestEnvironmentEnd":1759773234212,"loadTestEnvironmentStart":1759773234053,"runtime":7211,"setupAfterEnvEnd":1759773234572,"setupAfterEnvStart":1759773234572,"setupFilesEnd":1759773234214,"setupFilesStart":1759773234214,"slow":true,"start":1759773234214},"testFilePath":"F:\\git\\online-store-backend\\src\\infrastructure\\services\\token\\token.service.unit.test.ts","failureMessage":null,"testResults":[{"ancestorTitles":["TokenService","generateAccessToken"],"duration":19,"failureMessages":[],"fullName":"TokenService generateAccessToken должен успешно сгенерировать access токен","status":"passed","title":"должен успешно сгенерировать access токен"},{"ancestorTitles":["TokenService","generateAccessToken"],"duration":22,"failureMessages":[],"fullName":"TokenService generateAccessToken должен пробросить ошибку если JwtService.signAsync выбрасывает исключение","status":"passed","title":"должен пробросить ошибку если JwtService.signAsync выбрасывает исключение"},{"ancestorTitles":["TokenService","generateRefreshToken"],"duration":6,"failureMessages":[],"fullName":"TokenService generateRefreshToken должен успешно сгенерировать refresh токен","status":"passed","title":"должен успешно сгенерировать refresh токен"},{"ancestorTitles":["TokenService","generateRefreshToken"],"duration":7,"failureMessages":[],"fullName":"TokenService generateRefreshToken должен пробросить ошибку если RefreshTokenRepository.createRefreshToken выбрасывает исключение","status":"passed","title":"должен пробросить ошибку если RefreshTokenRepository.createRefreshToken выбрасывает исключение"},{"ancestorTitles":["TokenService","generateRefreshToken"],"duration":9,"failureMessages":[],"fullName":"TokenService generateRefreshToken должен пробросить ошибку если JwtService.signAsync выбрасывает исключение","status":"passed","title":"должен пробросить ошибку если JwtService.signAsync выбрасывает исключение"},{"ancestorTitles":["TokenService","decodeRefreshToken"],"duration":9,"failureMessages":[],"fullName":"TokenService decodeRefreshToken должен успешно декодировать валидный refresh токен","status":"passed","title":"должен успешно декодировать валидный refresh токен"},{"ancestorTitles":["TokenService","decodeRefreshToken"],"duration":8,"failureMessages":[],"fullName":"TokenService decodeRefreshToken должен выбросить UnprocessableEntityException для истекшего токена","status":"passed","title":"должен выбросить UnprocessableEntityException для истекшего токена"},{"ancestorTitles":["TokenService","decodeRefreshToken"],"duration":6,"failureMessages":[],"fullName":"TokenService decodeRefreshToken должен выбросить UnprocessableEntityException для неверного формата токена","status":"passed","title":"должен выбросить UnprocessableEntityException для неверного формата токена"},{"ancestorTitles":["TokenService","getUserFromRefreshTokenPayload"],"duration":4,"failureMessages":[],"fullName":"TokenService getUserFromRefreshTokenPayload должен успешно получить пользователя из payload","status":"passed","title":"должен успешно получить пользователя из payload"},{"ancestorTitles":["TokenService","getUserFromRefreshTokenPayload"],"duration":3,"failureMessages":[],"fullName":"TokenService getUserFromRefreshTokenPayload должен выбросить UnprocessableEntityException для отсутствующего subject","status":"passed","title":"должен выбросить UnprocessableEntityException для отсутствующего subject"},{"ancestorTitles":["TokenService","getUserFromRefreshTokenPayload"],"duration":3,"failureMessages":[],"fullName":"TokenService getUserFromRefreshTokenPayload должен пробросить ошибку если UserRepository.findUser выбрасывает исключение","status":"passed","title":"должен пробросить ошибку если UserRepository.findUser выбрасывает исключение"},{"ancestorTitles":["TokenService","getStoredRefreshTokenFromRefreshTokenPayload"],"duration":3,"failureMessages":[],"fullName":"TokenService getStoredRefreshTokenFromRefreshTokenPayload должен успешно получить сохраненный refresh токен","status":"passed","title":"должен успешно получить сохраненный refresh токен"},{"ancestorTitles":["TokenService","getStoredRefreshTokenFromRefreshTokenPayload"],"duration":4,"failureMessages":[],"fullName":"TokenService getStoredRefreshTokenFromRefreshTokenPayload должен выбросить UnprocessableEntityException для отсутствующего jti","status":"passed","title":"должен выбросить UnprocessableEntityException для отсутствующего jti"},{"ancestorTitles":["TokenService","getStoredRefreshTokenFromRefreshTokenPayload"],"duration":3,"failureMessages":[],"fullName":"TokenService getStoredRefreshTokenFromRefreshTokenPayload должен вернуть null если токен не найден","status":"passed","title":"должен вернуть null если токен не найден"},{"ancestorTitles":["TokenService","decodedAccessToken"],"duration":4,"failureMessages":[],"fullName":"TokenService decodedAccessToken должен успешно декодировать access токен","status":"passed","title":"должен успешно декодировать access токен"},{"ancestorTitles":["TokenService","decodedAccessToken"],"duration":9,"failureMessages":[],"fullName":"TokenService decodedAccessToken должен пробросить ошибку если JwtService.verifyAsync выбрасывает исключение","status":"passed","title":"должен пробросить ошибку если JwtService.verifyAsync выбрасывает исключение"},{"ancestorTitles":["TokenService","updateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService updateRefreshToken должен успешно обновить refresh токен","status":"passed","title":"должен успешно обновить refresh токен"},{"ancestorTitles":["TokenService","updateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService updateRefreshToken должен выбросить NotFoundException если refresh токен не найден","status":"passed","title":"должен выбросить NotFoundException если refresh токен не найден"},{"ancestorTitles":["TokenService","updateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService updateRefreshToken должен выбросить UnprocessableEntityException если пользователь не найден","status":"passed","title":"должен выбросить UnprocessableEntityException если пользователь не найден"},{"ancestorTitles":["TokenService","createAccessTokenFromRefreshToken"],"duration":4,"failureMessages":[],"fullName":"TokenService createAccessTokenFromRefreshToken должен успешно создать access токен из refresh токена","status":"passed","title":"должен успешно создать access токен из refresh токена"},{"ancestorTitles":["TokenService","hashRefreshToken"],"duration":61,"failureMessages":[],"fullName":"TokenService hashRefreshToken должен успешно захешировать refresh токен","status":"passed","title":"должен успешно захешировать refresh токен"},{"ancestorTitles":["TokenService","getRefreshExpiresAt"],"duration":3,"failureMessages":[],"fullName":"TokenService getRefreshExpiresAt должен успешно получить дату истечения токена","status":"passed","title":"должен успешно получить дату истечения токена"},{"ancestorTitles":["TokenService","getRefreshExpiresAt"],"duration":2,"failureMessages":[],"fullName":"TokenService getRefreshExpiresAt должен вернуть undefined если токен не содержит exp","status":"passed","title":"должен вернуть undefined если токен не содержит exp"},{"ancestorTitles":["TokenService","getRefreshExpiresAt"],"duration":3,"failureMessages":[],"fullName":"TokenService getRefreshExpiresAt должен вернуть undefined если токен невалидный","status":"passed","title":"должен вернуть undefined если токен невалидный"},{"ancestorTitles":["TokenService","removeRefreshToken"],"duration":2,"failureMessages":[],"fullName":"TokenService removeRefreshToken должен удалить единственный refresh токен","status":"passed","title":"должен удалить единственный refresh токен"},{"ancestorTitles":["TokenService","removeRefreshToken"],"duration":4,"failureMessages":[],"fullName":"TokenService removeRefreshToken должен удалить все refresh токены если их больше одного","status":"passed","title":"должен удалить все refresh токены если их больше одного"},{"ancestorTitles":["TokenService","rotateRefreshToken"],"duration":15,"failureMessages":[],"fullName":"TokenService rotateRefreshToken должен успешно ротировать refresh токен","status":"passed","title":"должен успешно ротировать refresh токен"},{"ancestorTitles":["TokenService","rotateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService rotateRefreshToken должен выбросить NotFoundException если токен не найден","status":"passed","title":"должен выбросить NotFoundException если токен не найден"},{"ancestorTitles":["TokenService","rotateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService rotateRefreshToken должен выбросить UnprocessableEntityException если пользователь токена не совпадает","status":"passed","title":"должен выбросить UnprocessableEntityException если пользователь токена не совпадает"},{"ancestorTitles":["TokenService","rotateRefreshToken"],"duration":3,"failureMessages":[],"fullName":"TokenService rotateRefreshToken должен выбросить UnprocessableEntityException если токен истек","status":"passed","title":"должен выбросить UnprocessableEntityException если токен истек"}]}],"config":{"bail":0,"changedFilesWithAncestor":false,"ci":false,"collectCoverage":false,"collectCoverageFrom":["src/**/*.(t|j)s","!src/**/*.spec.ts","!src/**/*.test.ts","!src/main.ts","!src/**/*.module.ts","!src/**/*.dto.ts","!src/**/*.interface.ts","!src/**/*.response.ts","!src/**/*.request.ts"],"coverageDirectory":"F:\\git\\online-store-backend\\coverage","coverageProvider":"babel","coverageReporters":["text","lcov","html","json-summary"],"coverageThreshold":{"global":{"branches":70,"functions":70,"lines":70,"statements":70}},"detectLeaks":false,"detectOpenHandles":true,"errorOnDeprecated":false,"expand":false,"findRelatedTests":false,"forceExit":true,"json":false,"lastCommit":false,"listTests":false,"logHeapUsage":false,"maxConcurrency":5,"maxWorkers":7,"noStackTrace":false,"nonFlagArgs":["src/infrastructure/services/token/token.service.unit.test.ts"],"notify":false,"notifyMode":"failure-change","onlyChanged":false,"onlyFailures":false,"openHandlesTimeout":1000,"passWithNoTests":false,"projects":[],"reporters":[["default",{}],["F:\\git\\online-store-backend\\node_modules\\jest-html-reporters\\index.js",{"publicPath":"./test-reports","filename":"test-report.html","expand":true,"hideIcon":false,"pageTitle":"Online Store Backend - Test Results","darkTheme":false,"includeFailureMsg":true,"includeSuiteFailure":true,"includeConsoleLog":true,"includeStackTrace":true,"includeObsoleteSnapshots":true,"reportTitle":"Test Results Report","sort":"status"}]],"rootDir":"F:\\git\\online-store-backend","runInBand":false,"runTestsByPath":false,"seed":-1000710439,"skipFilter":false,"snapshotFormat":{"escapeString":false,"printBasicPrototype":false},"testFailureExitCode":1,"testPathPatterns":{"patterns":["src/infrastructure/services/token/token.service.unit.test.ts"],"type":"TestPathPatterns"},"testSequencer":"F:\\git\\online-store-backend\\node_modules\\@jest\\test-sequencer\\build\\index.js","updateSnapshot":"new","useStderr":false,"verbose":true,"waitForUnhandledRejections":false,"watch":false,"watchAll":false,"watchman":true,"workerThreads":false},"endTime":1759773241436,"_reporterOptions":{"publicPath":"./test-reports","filename":"test-report.html","expand":true,"pageTitle":"Online Store Backend - Test Results","hideIcon":false,"testCommand":"","openReport":false,"failureMessageOnly":0,"enableMergeData":false,"dataMergeLevel":1,"inlineSource":false,"urlForTestFiles":"","darkTheme":false,"includeConsoleLog":true,"stripSkippedTest":false,"includeFailureMsg":true,"includeSuiteFailure":true,"includeStackTrace":true,"includeObsoleteSnapshots":true,"reportTitle":"Test Results Report","sort":"status"},"logInfoMapping":{},"attachInfos":{}})