// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –î–û –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
process.env.ALLOWED_ORIGINS = 'http://localhost:3000';
process.env.JWT_SECRET = 'test_access_secret';
process.env.JWT_REFRESH_SECRET = 'test_refresh_secret';
process.env.COOKIE_PARSER_SECRET_KEY = 'test_cookie_secret';
process.env.DATABASE_URL =
    'mysql://test_user:TestPass123!@127.0.0.1:3308/online_store_test';
process.env.NODE_ENV = 'test';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ .test.env
process.env.TEST_MYSQL_USER = 'test_user';
process.env.TEST_MYSQL_PASSWORD = 'TestPass123!';
process.env.TEST_MYSQL_DATABASE = 'online_store_test';
process.env.TEST_MYSQL_HOST = '127.0.0.1';
process.env.TEST_MYSQL_PORT = '3308';
process.env.TEST_DIALECT = 'mysql';

import { Test, TestingModule } from '@nestjs/testing';
import { INestApplication } from '@nestjs/common';
import request from 'supertest';
import { AppModule } from '../../../app.module';
import { Sequelize } from 'sequelize-typescript';
import { execSync } from 'child_process';

describe('ProductController Pagination V2', () => {
    let app: INestApplication;
    let sequelize: Sequelize;

    beforeAll(async () => {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        try {
            console.log('üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î...');
            execSync('npx sequelize-cli db:migrate --env test', {
                stdio: 'pipe', // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
                cwd: process.cwd(),
            });
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
        } catch (error) {
            console.warn(
                '‚ö†Ô∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º sync:',
                error instanceof Error ? error.message : String(error),
            );
        }

        const moduleFixture: TestingModule = await Test.createTestingModule({
            imports: [AppModule],
        }).compile();

        app = moduleFixture.createNestApplication();
        await app.init();

        // –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Sequelize –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
        sequelize = moduleFixture.get<Sequelize>(Sequelize);

        // Fallback: –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        try {
            await sequelize.sync({ force: false });
        } catch (error) {
            console.warn(
                '‚ö†Ô∏è Sync –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω:',
                error instanceof Error ? error.message : String(error),
            );
        }
    });

    afterAll(async () => {
        if (app) {
            await app.close();
        }
    });

    describe('GET /product/list-v2', () => {
        it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ { data, meta }', async () => {
            const response = await request(app.getHttpServer())
                .get('/product/list-v2')
                .query({ page: 1, size: 2 })
                .expect(200);

            expect(response.body).toHaveProperty('data');
            expect(response.body).toHaveProperty('meta');
            expect(Array.isArray(response.body.data)).toBe(true);
        });

        it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é', async () => {
            const response = await request(app.getHttpServer())
                .get('/product/list-v2')
                .query({ page: 2, size: 1 })
                .expect(200);

            expect(response.body.meta.currentPage).toBe(2);
            expect(response.body.meta.previousPage).toBe(1);
        });
    });

    describe('GET /product/brand/:brandId/list-v2', () => {
        it('–¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –±—Ä–µ–Ω–¥–∞ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ', async () => {
            const response = await request(app.getHttpServer())
                .get('/product/brand/1/list-v2')
                .query({ page: 1, size: 2 })
                .expect(200);

            expect(response.body).toHaveProperty('data');
            expect(response.body).toHaveProperty('meta');
        });
    });
});
