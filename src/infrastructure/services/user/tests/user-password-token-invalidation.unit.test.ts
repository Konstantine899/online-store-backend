/**
 * SEC-001-1: Password Update Token Invalidation Tests
 * CRITICAL SECURITY: Verify all refresh tokens are invalidated on password update
 */

import { Test, TestingModule } from '@nestjs/testing';
import { getModelToken } from '@nestjs/sequelize';
import { NotFoundException } from '@nestjs/common';
import { UserModel } from '@app/domain/models';
import { UserService } from '../user.service';
import {
    UserRepository,
    RefreshTokenRepository,
} from '@app/infrastructure/repositories';
import { RoleService } from '../../role/role.service';
import { LoginHistoryService } from '../../login-history/login-history.service';

describe('SEC-001-1: Password Update Token Invalidation', () => {
    let service: UserService;
    let userRepository: jest.Mocked<UserRepository>;
    let refreshTokenRepository: jest.Mocked<RefreshTokenRepository>;
    let userModel: any;

    const mockUser = {
        id: 1,
        email: 'user@example.com',
        password: 'old-hash',
    };

    beforeEach(async () => {
        const module: TestingModule = await Test.createTestingModule({
            providers: [
                UserService,
                {
                    provide: UserRepository,
                    useValue: {
                        findUserByPkId: jest.fn(),
                    },
                },
                {
                    provide: RefreshTokenRepository,
                    useValue: {
                        removeListRefreshTokens: jest.fn(),
                    },
                },
                {
                    provide: RoleService,
                    useValue: {
                        getRole: jest.fn(),
                    },
                },
                {
                    provide: LoginHistoryService,
                    useValue: {
                        logSuccessfulLogin: jest.fn(),
                    },
                },
                {
                    provide: getModelToken(UserModel),
                    useValue: {
                        update: jest.fn(),
                    },
                },
            ],
        }).compile();

        service = module.get<UserService>(UserService);
        userRepository = module.get(
            UserRepository,
        ) as jest.Mocked<UserRepository>;
        refreshTokenRepository = module.get(
            RefreshTokenRepository,
        ) as jest.Mocked<RefreshTokenRepository>;
        userModel = module.get(getModelToken(UserModel));
    });

    describe('updatePassword', () => {
        it('‚úÖ CRITICAL: –¥–æ–ª–∂–µ–Ω –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –í–°–ï refresh tokens –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(
                mockUser as UserModel,
            );
            userModel.update.mockResolvedValue([1]);
            refreshTokenRepository.removeListRefreshTokens.mockResolvedValue(3); // 3 —Ç–æ–∫–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–æ

            // Act
            await service.updatePassword(1, 'new-hash');

            // Assert
            expect(refreshTokenRepository.removeListRefreshTokens).toHaveBeenCalledWith(
                1,
            );
            expect(refreshTokenRepository.removeListRefreshTokens).toHaveBeenCalledTimes(
                1,
            );
        });

        it('‚úÖ SECURITY: –¥–æ–ª–∂–µ–Ω –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ü–ï–†–ï–î –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞ (–∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—å)', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(
                mockUser as UserModel,
            );
            userModel.update.mockResolvedValue([1]);
            refreshTokenRepository.removeListRefreshTokens.mockResolvedValue(2);

            const callOrder: string[] = [];
            userModel.update.mockImplementation(() => {
                callOrder.push('update');
                return Promise.resolve([1]);
            });
            refreshTokenRepository.removeListRefreshTokens.mockImplementation(
                () => {
                    callOrder.push('invalidate_tokens');
                    return Promise.resolve(2);
                },
            );

            // Act
            await service.updatePassword(1, 'new-hash');

            // Assert: –ø–æ—Ä—è–¥–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: update ‚Üí invalidate_tokens ‚Üí cache
            expect(callOrder).toEqual(['update', 'invalidate_tokens']);
        });

        it('‚úÖ –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(
                mockUser as UserModel,
            );
            userModel.update.mockResolvedValue([1]);
            refreshTokenRepository.removeListRefreshTokens.mockResolvedValue(5); // 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π

            // Act
            await service.updatePassword(1, 'new-hash');

            // Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –±—ã–ª –≤—ã–∑–≤–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º userId
            expect(refreshTokenRepository.removeListRefreshTokens).toHaveBeenCalledWith(
                1,
            );
        });

        it('‚ùå –¥–æ–ª–∂–µ–Ω –±—Ä–æ—Å–∏—Ç—å NotFoundException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(undefined);

            // Act & Assert
            await expect(
                service.updatePassword(99999, 'new-hash'),
            ).rejects.toThrow(NotFoundException);
            expect(
                refreshTokenRepository.removeListRefreshTokens,
            ).not.toHaveBeenCalled();
        });

        it('‚úÖ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–µ—Ç (0 —É–¥–∞–ª–µ–Ω–æ)', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(
                mockUser as UserModel,
            );
            userModel.update.mockResolvedValue([1]);
            refreshTokenRepository.removeListRefreshTokens.mockResolvedValue(0); // –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤

            // Act
            await service.updatePassword(1, 'new-hash');

            // Assert
            expect(refreshTokenRepository.removeListRefreshTokens).toHaveBeenCalledWith(
                1,
            );
            expect(userModel.update).toHaveBeenCalledWith(
                { password: 'new-hash' },
                { where: { id: 1 } },
            );
        });

        it('üîí SECURITY: –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π (–Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å—Å—è)', async () => {
            // Arrange
            userRepository.findUserByPkId.mockResolvedValue(
                mockUser as UserModel,
            );
            userModel.update.mockResolvedValue([1]);
            refreshTokenRepository.removeListRefreshTokens.mockResolvedValue(1);

            // Act
            await service.updatePassword(1, 'new-hash');

            // Assert: removeListRefreshTokens –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
            expect(
                refreshTokenRepository.removeListRefreshTokens,
            ).toHaveBeenCalled();
            const callCount =
                refreshTokenRepository.removeListRefreshTokens.mock.calls
                    .length;
            expect(callCount).toBeGreaterThan(0);
        });
    });
});

