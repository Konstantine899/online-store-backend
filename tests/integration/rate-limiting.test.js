// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ rate limiting
// –ó–∞–ø—É—Å–∫: node tests/integration/rate-limiting.test.js

const baseUrl = 'http://localhost:5000/online-store/auth';

async function testRateLimiting() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...\n');

    // –¢–µ—Å—Ç 1: –õ–æ–≥–∏–Ω - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (5 –ø–æ–ø—ã—Ç–æ–∫ –≤ 15 –º–∏–Ω—É—Ç)
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç –ª–æ–≥–∏–Ω–∞ (5 –ø–æ–ø—ã—Ç–æ–∫ –≤ 15 –º–∏–Ω—É—Ç)...');
    
    for (let i = 1; i <= 7; i++) {
        try {
            const response = await fetch(`${baseUrl}/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: 'test@example.com',
                    password: 'wrongpassword'
                })
            });
            
            if (response.status === 401) {
                const error = await response.text();
                if (error.includes('Too many login attempts')) {
                    console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –õ–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª - ${error}`);
                    break;
                } else {
                    console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ - ${error}`);
                }
            } else {
                console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –°—Ç–∞—Ç—É—Å ${response.status}`);
            }
        } catch (error) {
            console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç refresh (10 –ø–æ–ø—ã—Ç–æ–∫ –≤ 5 –º–∏–Ω—É—Ç)...');
    
    // –¢–µ—Å—Ç 2: Refresh - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (10 –ø–æ–ø—ã—Ç–æ–∫ –≤ 5 –º–∏–Ω—É—Ç)
    for (let i = 1; i <= 12; i++) {
        try {
            const response = await fetch(`${baseUrl}/refresh`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ cookie –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            });
            
            if (response.status === 401) {
                const error = await response.text();
                if (error.includes('Too many refresh attempts')) {
                    console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –õ–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª - ${error}`);
                    break;
                } else if (error.includes('Refresh token cookie is missing')) {
                    console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ cookie - ${error}`);
                } else {
                    console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ - ${error}`);
                }
            } else {
                console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –°—Ç–∞—Ç—É—Å ${response.status}`);
            }
        } catch (error) {
            console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (3 –ø–æ–ø—ã—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç—É)...');
    
    // –¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (3 –ø–æ–ø—ã—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç—É)
    for (let i = 1; i <= 5; i++) {
        try {
            const response = await fetch(`${baseUrl}/registration`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    email: `test${i}@example.com`,
                    password: 'password123',
                    firstName: 'Test',
                    lastName: 'User'
                })
            });
            
            if (response.status === 401) {
                const error = await response.text();
                if (error.includes('Too many registration attempts')) {
                    console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –õ–∏–º–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª - ${error}`);
                    break;
                } else {
                    console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ - ${error}`);
                }
            } else if (response.status === 201) {
                console.log(`‚úÖ –ü–æ–ø—ã—Ç–∫–∞ ${i}: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è`);
            } else {
                console.log(`‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ ${i}: –°—Ç–∞—Ç—É—Å ${response.status}`);
            }
        } catch (error) {
            console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${i}: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - ${error.message}`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 100));
    }

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('- –õ–æ–≥–∏–Ω: 401 –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "Too many login attempts"');
    console.log('- Refresh: 401 –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "Too many refresh attempts"');
    console.log('- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: 401 –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º "Too many registration attempts"');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRateLimiting().catch(console.error);
