/**
 * SEC-001-1: Password Update Token Invalidation Integration Tests
 * CRITICAL SECURITY: E2E —Ç–µ—Å—Ç—ã –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ refresh tokens
 */

import { HttpStatus, INestApplication } from '@nestjs/common';
import request from 'supertest';
import { setupTestApp } from '../../setup/app';
import { TestDataFactory } from '../../utils/test-data-factory';

describe('SEC-001-1: Password Update Invalidation (Integration)', () => {
    let app: INestApplication;
    let adminToken: string;

    beforeAll(async () => {
        app = await setupTestApp();

        // –°–æ–∑–¥–∞—ë–º admin
        const admin = await TestDataFactory.createUserWithRole(app, 'ADMIN');
        adminToken = admin.token; // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ: token, –Ω–µ accessToken
    });

    afterAll(async () => {
        await app.close();
    });

    describe('üîí CRITICAL: Token Invalidation on Password Update', () => {
        it('‚úÖ E2E: refresh token –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å—Ç–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ admin password reset', async () => {
            // 1. –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
            const user = await TestDataFactory.createUserWithRole(app, 'USER');
            const loginResponse = await request(app.getHttpServer())
                .post('/online-store/auth/login')
                .send({ email: user.email, password: user.password })
                .expect(HttpStatus.OK);

            // –ò–∑–≤–ª–µ–∫–∞–µ–º refresh token –∏–∑ cookies
            const setCookieHeader = loginResponse.headers['set-cookie'];
            const refreshTokenCookie = setCookieHeader
                .find((cookie: string) => cookie.startsWith('refreshToken='));
            expect(refreshTokenCookie).toBeDefined();

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ refresh —Ç–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –î–û —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', refreshTokenCookie)
                .expect(HttpStatus.OK);

            // 3. Admin –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await request(app.getHttpServer())
                .put(`/online-store/user/update/${user.userId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    email: user.email,
                    password: 'NewSecurePassword123!',
                })
                .expect(HttpStatus.OK);

            // 4. CRITICAL: –°—Ç–∞—Ä—ã–π refresh —Ç–æ–∫–µ–Ω —Ç–µ–ø–µ—Ä—å –ù–ï –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å
            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', refreshTokenCookie)
                .expect(HttpStatus.UNAUTHORIZED); // ‚úÖ Session invalidated!
        });

        it('‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏: –í–°–ï refresh —Ç–æ–∫–µ–Ω—ã –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É—é—Ç—Å—è', async () => {
            // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await TestDataFactory.createUserWithRole(app, 'USER');

            // –õ–æ–≥–∏–Ω–∏–º—Å—è 2 —Ä–∞–∑–∞ (—Å–∏–º—É–ª–∏—Ä—É–µ–º 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞)
            const login1 = await request(app.getHttpServer())
                .post('/online-store/auth/login')
                .send({ email: user.email, password: user.password })
                .expect(HttpStatus.OK);

            const login2 = await request(app.getHttpServer())
                .post('/online-store/auth/login')
                .send({ email: user.email, password: user.password })
                .expect(HttpStatus.OK);

            const session1Cookie = login1.headers['set-cookie'].find((c: string) =>
                c.startsWith('refreshToken='),
            );
            const session2Cookie = login2.headers['set-cookie'].find((c: string) =>
                c.startsWith('refreshToken='),
            );

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ —Ç–æ–∫–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –î–û —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', session1Cookie)
                .expect(HttpStatus.OK);

            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', session2Cookie)
                .expect(HttpStatus.OK);

            // Admin –º–µ–Ω—è–µ—Ç –ø–∞—Ä–æ–ª—å
            await request(app.getHttpServer())
                .put(`/online-store/user/update/${user.userId}`)
                .set('Authorization', `Bearer ${adminToken}`)
                .send({
                    email: user.email,
                    password: 'NewPassword456!',
                })
                .expect(HttpStatus.OK);

            // CRITICAL: –û–ë–ê —Ç–æ–∫–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã
            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', session1Cookie)
                .expect(HttpStatus.UNAUTHORIZED);

            await request(app.getHttpServer())
                .post('/online-store/auth/refresh')
                .set('Cookie', session2Cookie)
                .expect(HttpStatus.UNAUTHORIZED);
        });
    });
});

