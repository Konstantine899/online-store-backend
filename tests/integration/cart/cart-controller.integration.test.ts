import { HttpStatus, INestApplication } from '@nestjs/common';
import { Sequelize } from 'sequelize-typescript';
import request from 'supertest';
import { setupTestApp } from '../../setup/app';
import { TestDataFactory, TestDatabaseSetup } from '../../utils';

// –•–µ–ª–ø–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å tenant-id –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
const createRequest = (app: INestApplication) => {
    return request(app.getHttpServer()).set('x-tenant-id', '1');
};

/**
 * SAAS-004-05: CartController Integration Tests
 *
 * Scope:
 * 1. GET /cart/get-cart - –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã (guest/auth)
 * 2. POST /cart/items - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (DTO validation)
 * 3. PATCH /cart/items/increment - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 * 4. PATCH /cart/items/decrement - —É–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
 * 5. DELETE /cart/items/:productId - —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
 * 6. DELETE /cart - –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
 * 7. POST /cart/promo-code - –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 * 8. DELETE /cart/promo-code - —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
 *
 * Goal: Full API coverage, DTO validation, error handling
 */

describe('CartController (Integration)', () => {
    let app: INestApplication;
    let authToken: string;
    let productId: number;
    let guestCartCookie: string;

    beforeAll(async () => {
        app = await setupTestApp();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ seeds –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
        await TestDatabaseSetup.setupDatabase('test');

        await app.init();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CartController –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        try {
            const cartController = app.get('CartController');
            console.log('‚úÖ CartController –Ω–∞–π–¥–µ–Ω:', cartController);
        } catch (error) {
            console.error(
                '‚ùå CartController –Ω–µ –Ω–∞–π–¥–µ–Ω:',
                error instanceof Error ? error.message : String(error),
            );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
        console.log(
            'üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:',
            Object.keys(app.getHttpServer()._router?.stack || {}),
        );

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥—É–∫—Ç –∏–∑ seeds (id: 1 - iPhone 15)
        productId = 1;

        // Create auth user
        const user = await TestDataFactory.createUserInDB(app.get(Sequelize), {
            email: 'cart-test@example.com',
            password: 'SecurePassword123!',
        });
        authToken = await TestDataFactory.loginUser(
            app,
            user.email,
            'SecurePassword123!',
        );
    }, 30000);

    afterAll(async () => {
        if (app) {
            await app.close();
        }
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    // ============================================================
    // 1. GET /cart/get-cart - –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    // ============================================================
    describe('GET /cart/get-cart', () => {
        it('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥–æ—Å—Ç–µ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –Ω–µ—Ç cookie', async () => {
            const response = await createRequest(app)
                .get('/online-store/cart/get-cart')
                .expect(HttpStatus.OK);

            expect(response.body).toMatchObject({
                cartId: expect.any(Number),
                products: [],
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω cookie
            const cookies = response.headers['set-cookie'] as string | string[];
            expect(cookies).toBeDefined();
            if (Array.isArray(cookies)) {
                expect(
                    cookies.some((c: string) => c.startsWith('cartId=')),
                ).toBe(true);
            }
        });

        it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å cookie', async () => {
            // –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É
            const firstResponse = await createRequest(app)
                .get('/online-store/cart/get-cart')
                .expect(HttpStatus.OK);

            const cookies = firstResponse.headers['set-cookie'] as
                | string
                | string[];
            const cartCookie = Array.isArray(cookies)
                ? cookies.find((c: string) => c.startsWith('cartId='))
                : cookies?.startsWith('cartId=')
                  ? cookies
                  : undefined;

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å cookie
            const secondResponse = await createRequest(app)
                .get('/online-store/cart/get-cart')
                .set('Cookie', cartCookie || '')
                .expect(HttpStatus.OK);

            expect(secondResponse.body.cartId).toBe(firstResponse.body.cartId);
        });

        it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
            const response = await createRequest(app)
                .get('/online-store/cart/get-cart')
                .set('Authorization', `Bearer ${authToken}`)
                .expect(HttpStatus.OK);

            expect(response.body).toMatchObject({
                cartId: expect.any(Number),
                products: expect.any(Array),
            });
        });
    });

    // ============================================================
    // 2. POST /cart/items - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    // ============================================================
    describe('POST /cart/items', () => {
        beforeEach(async () => {
            // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            const response = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                response.headers['set-cookie'] as string | string[]
            )?.toString();
        });

        it('–¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É', async () => {
            const response = await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({
                    productId,
                    quantity: 2,
                })
                .expect(HttpStatus.OK);

            expect(response.body).toMatchObject({
                cartId: expect.any(Number),
                products: expect.arrayContaining([
                    expect.objectContaining({
                        id: productId,
                        quantity: 2,
                    }),
                ]),
            });
        });

        describe('DTO Validation', () => {
            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ –Ω–µ—Ç productId', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/items')
                    .set('Cookie', guestCartCookie)
                    .send({
                        quantity: 2,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/ID —Ç–æ–≤–∞—Ä–∞/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ –Ω–µ—Ç quantity', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/items')
                    .set('Cookie', guestCartCookie)
                    .send({
                        productId,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ productId <= 0', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/items')
                    .set('Cookie', guestCartCookie)
                    .send({
                        productId: 0,
                        quantity: 2,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(
                            /ID —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0/i,
                        ),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ quantity < 1', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/items')
                    .set('Cookie', guestCartCookie)
                    .send({
                        productId,
                        quantity: 0,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–º–∏–Ω–∏–º—É–º 1/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ quantity > 999', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/items')
                    .set('Cookie', guestCartCookie)
                    .send({
                        productId,
                        quantity: 1000,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–º–∞–∫—Å–∏–º—É–º 999/i),
                    ]),
                );
            });
        });

        it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 404 –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', async () => {
            await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({
                    productId: 999999,
                    quantity: 1,
                })
                .expect(HttpStatus.NOT_FOUND);
        });
    });

    // ============================================================
    // 3. PATCH /cart/items/increment - –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    // ============================================================
    describe('PATCH /cart/items/increment', () => {
        beforeEach(async () => {
            // –°–æ–∑–¥–∞—ë–º –∫–æ—Ä–∑–∏–Ω—É —Å —Ç–æ–≤–∞—Ä–æ–º
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();

            await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({ productId, quantity: 2 });
        });

        it('–¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', async () => {
            const response = await createRequest(app)
                .patch('/online-store/cart/items/increment')
                .set('Cookie', guestCartCookie)
                .send({
                    productId,
                    amount: 3,
                })
                .expect(HttpStatus.OK);

            const product = response.body.products.find(
                (p: { id: number }) => p.id === productId,
            );
            expect(product.quantity).toBe(5); // 2 + 3
        });

        describe('DTO Validation', () => {
            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ –Ω–µ—Ç productId', async () => {
                const response = await createRequest(app)
                    .patch('/online-store/cart/items/increment')
                    .set('Cookie', guestCartCookie)
                    .send({ amount: 1 })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/ID —Ç–æ–≤–∞—Ä–∞/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ –Ω–µ—Ç amount', async () => {
                const response = await createRequest(app)
                    .patch('/online-store/cart/items/increment')
                    .set('Cookie', guestCartCookie)
                    .send({ productId })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞/i),
                    ]),
                );
            });
        });

        it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 404 –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ', async () => {
            await createRequest(app)
                .patch('/online-store/cart/items/increment')
                .set('Cookie', guestCartCookie)
                .send({
                    productId: 999999,
                    amount: 1,
                })
                .expect(HttpStatus.NOT_FOUND);
        });
    });

    // ============================================================
    // 4. PATCH /cart/items/decrement - –£–º–µ–Ω—å—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    // ============================================================
    describe('PATCH /cart/items/decrement', () => {
        beforeEach(async () => {
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();

            await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({ productId, quantity: 5 });
        });

        it('–¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞', async () => {
            const response = await createRequest(app)
                .patch('/online-store/cart/items/decrement')
                .set('Cookie', guestCartCookie)
                .send({
                    productId,
                    amount: 2,
                })
                .expect(HttpStatus.OK);

            const product = response.body.products.find(
                (p: { id: number }) => p.id === productId,
            );
            expect(product.quantity).toBe(3); // 5 - 2
        });

        it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0', async () => {
            const response = await createRequest(app)
                .patch('/online-store/cart/items/decrement')
                .set('Cookie', guestCartCookie)
                .send({
                    productId,
                    amount: 5,
                })
                .expect(HttpStatus.OK);

            expect(
                response.body.products.find(
                    (p: { id: number }) => p.id === productId,
                ),
            ).toBeUndefined();
        });

        describe('DTO Validation', () => {
            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ amount –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ', async () => {
                const response = await createRequest(app)
                    .patch('/online-store/cart/items/decrement')
                    .set('Cookie', guestCartCookie)
                    .send({
                        productId,
                        amount: 1.5,
                    })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º/i),
                    ]),
                );
            });
        });
    });

    // ============================================================
    // 5. DELETE /cart/items/:productId - –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    // ============================================================
    describe('DELETE /cart/items/:productId', () => {
        beforeEach(async () => {
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();

            await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({ productId, quantity: 3 });
        });

        it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', async () => {
            const response = await createRequest(app)
                .delete(`/online-store/cart/items/${productId}`)
                .set('Cookie', guestCartCookie)
                .expect(HttpStatus.OK);

            expect(
                response.body.products.find(
                    (p: { id: number }) => p.id === productId,
                ),
            ).toBeUndefined();
        });

        it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 404 –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ', async () => {
            await createRequest(app)
                .delete('/online-store/cart/items/999999')
                .set('Cookie', guestCartCookie)
                .expect(HttpStatus.NOT_FOUND);
        });
    });

    // ============================================================
    // 6. DELETE /cart - –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    // ============================================================
    describe('DELETE /cart', () => {
        beforeEach(async () => {
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();

            await createRequest(app)
                .post('/online-store/cart/items')
                .set('Cookie', guestCartCookie)
                .send({ productId, quantity: 5 });
        });

        it('–¥–æ–ª–∂–µ–Ω –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É', async () => {
            const response = await createRequest(app)
                .delete('/online-store/cart')
                .set('Cookie', guestCartCookie)
                .expect(HttpStatus.OK);

            expect(response.body.products).toHaveLength(0);
        });
    });

    // ============================================================
    // 7. POST /cart/promo-code - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    // ============================================================
    describe('POST /cart/promo-code', () => {
        beforeEach(async () => {
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();
        });

        describe('DTO Validation', () => {
            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ –Ω–µ—Ç code', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/promo-code')
                    .set('Cookie', guestCartCookie)
                    .send({})
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ code < 3 —Å–∏–º–≤–æ–ª–æ–≤', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/promo-code')
                    .set('Cookie', guestCartCookie)
                    .send({ code: 'AB' })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 400 –µ—Å–ª–∏ code > 50 —Å–∏–º–≤–æ–ª–æ–≤', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/promo-code')
                    .set('Cookie', guestCartCookie)
                    .send({ code: 'A'.repeat(51) })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 50/i),
                    ]),
                );
            });

            it('–¥–æ–ª–∂–µ–Ω –æ—á–∏—Å—Ç–∏—Ç—å XSS –≤ –∫–æ–¥–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞', async () => {
                const response = await createRequest(app)
                    .post('/online-store/cart/promo-code')
                    .set('Cookie', guestCartCookie)
                    .send({ code: '<script>alert("xss")</script>' })
                    .expect(HttpStatus.BAD_REQUEST);

                expect(response.body.message).toEqual(
                    expect.arrayContaining([
                        expect.stringMatching(/–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã/i),
                    ]),
                );
            });
        });

        // Note: —Ä–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ CartService
        // –ó–¥–µ—Å—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é DTO –∏ –±–∞–∑–æ–≤—ã–π API flow
    });

    // ============================================================
    // 8. DELETE /cart/promo-code - –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    // ============================================================
    describe('DELETE /cart/promo-code', () => {
        beforeEach(async () => {
            const getCartRes = await createRequest(app).get(
                '/online-store/cart/get-cart',
            );
            guestCartCookie = (
                getCartRes.headers['set-cookie'] as string | string[]
            )?.toString();
        });

        it('–¥–æ–ª–∂–µ–Ω —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', async () => {
            const response = await createRequest(app)
                .delete('/online-store/cart/promo-code')
                .set('Cookie', guestCartCookie)
                .expect(HttpStatus.OK);

            expect(response.body).toMatchObject({
                cartId: expect.any(Number),
                products: expect.any(Array),
            });
        });
    });
});
