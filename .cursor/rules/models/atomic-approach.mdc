# Атомарный подход к разработке - Общие принципы

## Контекст и цель
Данный файл описывает принципы атомарной разработки для всех моделей проекта. Каждая атомарная задача включает полный цикл разработки и завершается коммитом.

## Основные принципы

### 1. Атомарность задач
- **Одна задача = один коммит** - каждая атомарная задача завершается коммитом
- **Полный цикл разработки** - от модели до тестов включительно
- **Независимость** - каждая задача может быть разработана отдельно
- **Инкрементальность** - постепенное наращивание функциональности

### 2. Структура атомарной задачи
Каждая атомарная задача включает следующие этапы:

1. **Анализ** - что именно добавляем/изменяем
2. **Миграция** - изменения в БД (если нужны)
3. **Модель** - обновление Domain модели
4. **Сервис** - бизнес-логика
5. **DTO** - валидация входных данных
6. **Контроллер** - API endpoints
7. **Тесты** - unit + integration тесты
8. **Коммит** - фиксация изменений

### 3. Шаблон атомарной задачи

```markdown
#### Задача X.Y: [Название задачи]
**Цель**: [Что именно делаем]
**Ветка**: `feature/[scope]/[kebab-case-name]`

**План атомарной задачи**:
1. **Миграция**: [Что меняем в БД]
2. **Модель**: [Что обновляем в модели]
3. **Сервис**: [Какие методы добавляем]
4. **DTO**: [Какие DTO создаем/обновляем]
5. **Контроллер**: [Какие endpoints добавляем]
6. **Тесты**: [Какие тесты пишем]
7. **Коммит**: `[conventional commit message]`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена
```

## Правила выполнения задач

### Порядок выполнения
1. Выполнять задачи строго по порядку (1.1 → 1.2 → 1.3 → 2.1...)
2. Каждая задача должна быть полностью завершена перед переходом к следующей
3. После каждой задачи создавать коммит
4. При возникновении проблем - откатываться к последнему стабильному состоянию

### Критерии качества атомарной задачи
- **Независимость**: задача может быть разработана отдельно
- **Тестируемость**: полное покрытие тестами
- **Документированность**: обновление Swagger
- **Безопасность**: соблюдение правил валидации и авторизации
- **Производительность**: учет индексов и оптимизации

## Примеры атомарных задач

### User система
- `feat(user): add phone field to user profile`
- `feat(user): add newsletter subscription flag`
- `feat(user): add user address management`
- `feat(user): add consent management flags`

### Product система
- `feat(product): add SKU field to products`
- `feat(product): add base price and sale price fields`
- `feat(product): add stock and reserved stock fields`
- `feat(product): add multiple images support`

### Cart система
- `feat(cart): add session and status fields to cart`
- `feat(cart): add guest cart support`
- `feat(cart): add promo code support`
- `feat(cart): add discount calculation system`

## Формат коммитов

### Conventional Commits
Используем формат: `type(scope): summary`

**Типы**:
- `feat` - новая функциональность
- `fix` - исправление бага
- `perf` - улучшение производительности
- `refactor` - рефакторинг кода
- `test` - добавление тестов
- `docs` - обновление документации

**Области (scope)**:
- `user` - система пользователей
- `product` - система товаров
- `cart` - система корзины
- `order` - система заказов
- `auth` - система аутентификации
- `db` - база данных
- `api` - API

**Примеры**:
- `feat(user): add phone field to user profile`
- `feat(product): add SKU field to products`
- `feat(cart): add guest cart support`
- `perf(user): add database indexes for user flags`

## Работа с ветками

### Формат названий веток
`<prefix>/<scope>[-<ticket>]/<kebab-task>[-<extra>]`

**Примеры**:
- `feature/user/add-phone-field`
- `feature/product/add-sku-field`
- `feature/cart/add-guest-support`
- `fix/user/phone-validation-bug`

### Создание веток
1. Создавать ветку для каждой атомарной задачи
2. Название ветки должно соответствовать задаче
3. После завершения задачи - создавать PR и мержить

## Тестирование

### Обязательные тесты
Каждая атомарная задача должна включать:

1. **Unit тесты** - для сервисов и бизнес-логики
2. **Integration тесты** - для API endpoints
3. **Тесты валидации** - для DTO
4. **Тесты безопасности** - для авторизации

### Покрытие тестами
- Минимум 80% покрытие для новых методов
- Обязательные тесты для критичных функций
- Тесты для позитивных и негативных сценариев

## Документация

### Swagger документация
Каждая атомарная задача должна обновлять:

1. **API endpoints** - описание новых endpoints
2. **DTO** - описание входных и выходных данных
3. **Responses** - описание ответов API
4. **Examples** - примеры запросов и ответов

### Обновление README
При необходимости обновлять:
- Описание API
- Примеры использования
- Инструкции по развертыванию

## Контроль качества

### Линтеры
- ESLint - проверка стиля кода
- Prettier - форматирование кода
- TypeScript - проверка типов

### Проверки перед коммитом
1. Код проходит все линтеры
2. Тесты проходят успешно
3. Swagger документация обновлена
4. Код соответствует стандартам проекта

## Откат изменений

### При возникновении проблем
1. Откатиться к последнему стабильному коммиту
2. Проанализировать причину проблемы
3. Исправить проблему
4. Продолжить выполнение задачи

### Безопасный откат
- Использовать `git checkout` для отката файлов
- Использовать `git reset` для отката коммитов
- Сохранять рабочую копию перед экспериментами

## Масштабирование

### Добавление новых моделей
При создании новых моделей:

1. Создать атомарный промт по образцу существующих
2. Разбить на атомарные задачи
3. Выполнять задачи по порядку
4. Документировать процесс

### Расширение существующих моделей
При расширении существующих моделей:

1. Определить атомарные изменения
2. Создать задачи для каждого изменения
3. Выполнять задачи по порядку
4. Обновлять документацию

## Заключение

Атомарный подход обеспечивает:
- **Качество кода** - каждая задача тщательно проработана
- **Надежность** - полное тестирование каждой функции
- **Поддерживаемость** - четкая структура и документация
- **Масштабируемость** - возможность постепенного развития

Следование этим принципам поможет создать качественную и надежную систему.