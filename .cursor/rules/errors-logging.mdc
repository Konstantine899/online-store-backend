---
description: Ошибки и логирование
globs:
alwaysApply: true
---

# Ошибки и логирование

## Формат ошибок (единый контракт)
- Все HTTP-ошибки возвращаются в формате:
```json
{ "statusCode": number, "url": string, "path": string, "name": string, "message": string | string[], "timestamp?": string }
```
- Сообщения — на русском, конкретные. Списки валидационных ошибок — массив строк.

## Exception Filters (глобально)
- `CustomNotFoundExceptionFilter`: подробный 404 (`url`, `path`, `name`, `message`).
- `SequelizeDatabaseErrorExceptionFilter`: ошибки БД (тип/имя, timestamp).
- `SequelizeUniqueConstraintExceptionFilter`: конфликты уникальности.
- Не бросаем "сырые" `DatabaseError` наружу; маппим в понятные клиенту сообщения.
- При добавлении новых типов ошибок — оформляем отдельным фильтром.

## Валидация и ошибки
- Глобально `CustomValidationPipe`; сообщения об ошибках — на русском.
- Для DTO — максимально конкретные `message` в декораторах `class-validator`.

## Логирование (pino)
- Формат: структурированные JSON-логи; в dev допускается `pino-pretty`.
- Уровни:
  - `info`: бизнес-события и ключевые переходы состояний (регистрация, логин, создание сущностей).
  - `warn`: ретраи, деградации, rate limiting, нестандартные ситуации.
  - `error`: падения, необработанные исключения, критичные ошибки БД/инфраструктуры.
- Не логируем PII/секреты; маскируем токены/cookies/e-mail/идентификаторы при необходимости.
- Access-логи HTTP — через `pino-http`, включать `x-request-id` (см. ниже).

## Correlation ID
- `CorrelationIdMiddleware`: генерирует/пробрасывает `x-request-id`.
- В ответ всегда добавлять `x-request-id`, включать его во все логи для трассировки.
- При создании "дочерних" логгеров — добавлять `correlationId` в бин.

## Rate Limiting и безопасность
- Блокировки в `BruteforceGuard` логировать на уровне `warn` (без PII).
- `helmet` и CORS — не логируем заголовки полностью; логируем только политику и исходы (успех/блок).
- Логировать аномальные паттерны (частые 401/403/429 по IP/аккаунту) агрегированно, без PII.

## SQL и производительность
- SQL-логирование управляется переменной `SQL_LOGGING` (env).
- Долгие запросы/медленные endpoints логировать как `warn` с метрикой времени.
- Регулярный аудит индексов — результаты/решения фиксировать в PR описаниях.

## Необработанные исключения (process-level)
- Обработчики `process.on('unhandledRejection')` и `process.on('uncaughtException')` — логируем `error` и инициируем корректное завершение (graceful shutdown) без утечки PII.

## Health и шум логов
- `/health` не шумит: логируем только `error` (например, деградации зависимости).
- Для статичных ассетов — отключать избыточные access-логи.

## Практика разработки
- Каждое новое исключение — согласовать формат ответа и уровень логирования.
- В PR чек-лист: формат ошибки, русские сообщения, маскирование, correlation ID в логах.
