# Система корзины (Cart System) - Атомарный подход

## Контекст и цель
Поэтапная разработка системы корзины через атомарные задачи. Каждая задача включает полный цикл: миграция → модель → сервис → DTO → контроллер → тесты → коммит.

## Принципы атомарной разработки
- **Одна задача = один коммит** - каждая атомарная задача завершается коммитом
- **Полный цикл** - от модели до тестов включительно  
- **Независимость** - каждая задача может быть разработана отдельно
- **Инкрементальность** - постепенное наращивание функциональности

## Атомарные задачи для Cart системы

### Фаза 1: Базовые поля корзины

#### Задача 1.1: Добавить поля сессии и статуса
**Цель**: Добавить поддержку сессий и статусов корзины
**Ветка**: `feature/cart/add-session-status-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки session_id, status в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с полями сессии и статуса
4. **Сервис**: Добавить методы для работы с сессиями и статусами
5. **DTO**: Обновить CreateCartDto, UpdateCartDto с новыми полями
6. **Контроллер**: Обновить endpoints для работы с сессиями
7. **Тесты**: Unit тесты для сервиса + integration тесты для API
8. **Коммит**: `feat(cart): add session and status fields to cart`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена

#### Задача 1.2: Добавить поля суммы (subtotal, discount, total)
**Цель**: Добавить расчет сумм корзины
**Ветка**: `feature/cart/add-price-calculation-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки subtotal, discount_amount, total в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с полями сумм
4. **Сервис**: Добавить методы для расчета сумм корзины
5. **DTO**: Обновить DTO с полями сумм
6. **Контроллер**: Обновить endpoints для работы с суммами
7. **Тесты**: Тесты расчета сумм
8. **Коммит**: `feat(cart): add price calculation fields (subtotal, discount, total)`

#### Задача 1.3: Добавить поля безопасности (ip_address, is_abandoned)
**Цель**: Добавить поля безопасности и аналитики
**Ветка**: `feature/cart/add-security-analytics-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки ip_address, is_abandoned в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с полями безопасности
4. **Сервис**: Добавить методы для работы с безопасностью
5. **DTO**: Обновить DTO с полями безопасности
6. **Контроллер**: Обновить endpoints для работы с безопасностью
7. **Тесты**: Тесты безопасности корзины
8. **Коммит**: `feat(cart): add security and analytics fields (IP, abandoned)`

### Фаза 2: Типы корзин

#### Задача 2.1: Добавить поддержку гостевых корзин
**Цель**: Добавить возможность работы с корзиной без авторизации
**Ветка**: `feature/cart/add-guest-cart-support`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку is_guest_cart в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с поддержкой гостевых корзин
4. **Сервис**: Добавить методы для работы с гостевыми корзинами
5. **DTO**: Обновить DTO с флагом гостевой корзины
6. **Контроллер**: Обновить endpoints для гостевых корзин
7. **Тесты**: Тесты гостевых корзин
8. **Коммит**: `feat(cart): add guest cart support`

#### Задача 2.2: Добавить поддержку сохраненных корзин
**Цель**: Добавить возможность сохранения корзин пользователей
**Ветка**: `feature/cart/add-saved-cart-support`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_saved, is_shared в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с поддержкой сохраненных корзин
4. **Сервис**: Добавить методы для работы с сохраненными корзинами
5. **DTO**: Обновить DTO с флагами сохранения
6. **Контроллер**: Обновить endpoints для сохраненных корзин
7. **Тесты**: Тесты сохраненных корзин
8. **Коммит**: `feat(cart): add saved and shared cart support`

#### Задача 2.3: Добавить поддержку шаблонов корзин
**Цель**: Добавить возможность создания шаблонов корзин
**Ветка**: `feature/cart/add-cart-templates`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_template, is_public в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с поддержкой шаблонов
4. **Сервис**: Добавить методы для работы с шаблонами
5. **DTO**: Обновить DTO с флагами шаблонов
6. **Контроллер**: Обновить endpoints для шаблонов
7. **Тесты**: Тесты шаблонов корзин
8. **Коммит**: `feat(cart): add cart templates support`

### Фаза 3: Элементы корзины

#### Задача 3.1: Добавить поля элементов корзины
**Цель**: Расширить поля элементов корзины
**Ветка**: `feature/cart/add-cart-item-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки price, discount_amount, total_price в таблицу cart_items
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart-product.ts
3. **Модель (Domain)**: Обновить CartItemModel с новыми полями
4. **Сервис**: Добавить методы для работы с ценами элементов
5. **DTO**: Обновить DTO с полями цен
6. **Контроллер**: Обновить endpoints для элементов корзины
7. **Тесты**: Тесты элементов корзины
8. **Коммит**: `feat(cart): add price fields to cart items`

#### Задача 3.2: Добавить поддержку вариантов в элементах
**Цель**: Добавить поддержку вариантов товара в корзине
**Ветка**: `feature/cart/add-variants-to-items`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку variant_data JSONB в таблицу cart_items
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart-product.ts
3. **Модель (Domain)**: Обновить CartItemModel с вариантами
4. **Сервис**: Добавить методы для работы с вариантами
5. **DTO**: Обновить DTO с вариантами
6. **Контроллер**: Обновить endpoints для вариантов
7. **Тесты**: Тесты вариантов в корзине
8. **Коммит**: `feat(cart): add product variants support to cart items`

#### Задача 3.3: Добавить поля аналитики элементов
**Цель**: Добавить аналитические поля для элементов корзины
**Ветка**: `feature/cart/add-item-analytics`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки added_at, updated_at, is_gift в таблицу cart_items
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart-product.ts
3. **Модель (Domain)**: Обновить CartItemModel с аналитическими полями
4. **Сервис**: Добавить методы для работы с аналитикой
5. **DTO**: Обновить DTO с аналитическими полями
6. **Контроллер**: Обновить endpoints для аналитики
7. **Тесты**: Тесты аналитики элементов
8. **Коммит**: `feat(cart): add analytics fields to cart items`

### Фаза 4: Промокоды и скидки

#### Задача 4.1: Добавить поддержку промокодов
**Цель**: Добавить систему промокодов для корзины
**Ветка**: `feature/cart/add-promo-code-support`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки promo_code, promo_discount_amount в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с промокодами
4. **Сервис**: Добавить методы для работы с промокодами
5. **DTO**: Обновить DTO с промокодами
6. **Контроллер**: Обновить endpoints для промокодов
7. **Тесты**: Тесты системы промокодов
8. **Коммит**: `feat(cart): add promo code support`

#### Задача 4.2: Добавить расчет скидок
**Цель**: Добавить автоматический расчет скидок
**Ветка**: `feature/cart/add-discount-calculation`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки discount_percentage, discount_type в таблицу carts
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/cart.ts
3. **Модель (Domain)**: Обновить CartModel с типами скидок
4. **Сервис**: Добавить методы для расчета скидок
5. **DTO**: Обновить DTO с типами скидок
6. **Контроллер**: Обновить endpoints для скидок
7. **Тесты**: Тесты расчета скидок
8. **Коммит**: `feat(cart): add discount calculation system`

### Фаза 5: Индексы и производительность

#### Задача 5.1: Добавить индексы для производительности
**Цель**: Оптимизировать производительность запросов корзины
**Ветка**: `feature/cart/add-performance-indexes`

**План атомарной задачи**:
1. **Миграция**: Добавить индексы для часто используемых полей
2. **DB Runtime Model**: Обновить db/models/cart.ts (indexes) при необходимости
3. **Модель (Domain)**: Обновить модель с индексами
4. **Сервис**: Оптимизировать запросы с использованием индексов
5. **Тесты**: Тесты производительности
6. **Коммит**: `perf(cart): add database indexes for cart queries`

## Шаблон атомарной задачи

### Структура задачи
```markdown
#### Задача X.Y: [Название задачи]
**Цель**: [Что именно делаем]
**Ветка**: `feature/cart/[kebab-case-name]`

**План атомарной задачи**:
1. **Миграция**: [Что меняем в БД]
2. **DB Runtime Model**: Обновить db/models/* и db/models/types.ts
3. **Модель (Domain)**: [Что обновляем в модели]
4. **Сервис**: [Какие методы добавляем]
5. **DTO**: [Какие DTO создаем/обновляем]
6. **Контроллер**: [Какие endpoints добавляем]
7. **Тесты**: [Какие тесты пишем]
8. **Коммит**: `[conventional commit message]`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена
```

## Порядок выполнения
1. Выполнять задачи строго по порядку (1.1 → 1.2 → 1.3 → 2.1...)
2. Каждая задача должна быть полностью завершена перед переходом к следующей
3. После каждой задачи создавать коммит
4. При возникновении проблем - откатываться к последнему стабильному состоянию

## Критерии качества атомарной задачи
- **Независимость**: задача может быть разработана отдельно
- **Тестируемость**: полное покрытие тестами
- **Документированность**: обновление Swagger
- **Безопасность**: соблюдение правил валидации и авторизации
- **Производительность**: учет индексов и оптимизации