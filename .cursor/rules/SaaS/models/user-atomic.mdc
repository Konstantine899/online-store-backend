# Система пользователей (User System) - Атомарный подход

## Контекст и цель
Поэтапная разработка системы пользователей через атомарные задачи. Каждая задача включает полный цикл: миграция → модель → сервис → DTO → контроллер → тесты → коммит.

## Принципы атомарной разработки
- **Одна задача = один коммит** - каждая атомарная задача завершается коммитом
- **Полный цикл** - от модели до тестов включительно  
- **Независимость** - каждая задача может быть разработана отдельно
- **Инкрементальность** - постепенное наращивание функциональности

## Атомарные задачи для User системы

### Фаза 1: Базовый профиль пользователя

#### Задача 1.1: Добавить поля имени и фамилии
**Цель**: Расширить профиль пользователя полями firstName и lastName
**Ветка**: `feature/user/add-name-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки first_name, last_name в таблицу users
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с новыми полями и валидацией
4. **Сервис**: Добавить методы для работы с именем/фамилией
5. **DTO**: Создать UpdateUserProfileDto с валидацией имени
6. **Контроллер**: Добавить endpoint PATCH /users/profile для обновления профиля
7. **Тесты**: Unit тесты для сервиса + integration тесты для API
8. **Коммит**: `feat(user): add firstName and lastName fields to user profile`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена

#### Задача 1.2: Добавить поле телефона
**Цель**: Добавить поле phone с валидацией российских номеров
**Ветка**: `feature/user/add-phone-field`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку phone в таблицу users
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts (валидатор E.164)
3. **Модель (Domain)**: Обновить UserModel с валидацией телефона
4. **Сервис**: Добавить методы для работы с телефоном
5. **DTO**: Обновить DTO с валидацией телефона (@IsValidPhone)
6. **Контроллер**: Обновить endpoint для работы с телефоном
7. **Тесты**: Тесты валидации телефона
8. **Коммит**: `feat(user): add phone field with Russian number validation`

#### Задача 1.3: Добавить поле даты рождения
**Цель**: Добавить поле dateOfBirth с валидацией возраста
**Ветка**: `feature/user/add-birth-date-field`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку date_of_birth в таблицу users
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с валидацией даты
4. **Сервис**: Добавить методы для работы с датой рождения
5. **DTO**: Обновить DTO с валидацией возраста (18+)
6. **Контроллер**: Обновить endpoint для работы с датой рождения
7. **Тесты**: Тесты валидации возраста
8. **Коммит**: `feat(user): add dateOfBirth field with age validation`

### Фаза 2: Флаги согласий и статусов

#### Задача 2.1: Добавить флаги согласий (newsletter, marketing, cookies)
**Цель**: Добавить управление согласиями пользователя
**Ветка**: `feature/user/add-consent-flags`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_newsletter_subscribed, is_marketing_consent, is_cookie_consent
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с флагами согласий
4. **Сервис**: Добавить методы для управления согласиями
5. **DTO**: Создать UpdateConsentsDto
6. **Контроллер**: Добавить endpoint PATCH /users/consents
7. **Тесты**: Тесты управления согласиями
8. **Коммит**: `feat(user): add consent management flags (newsletter, marketing, cookies)`

#### Задача 2.2: Добавить статусные флаги (VIP, Premium, Beta)
**Цель**: Добавить статусные флаги пользователя
**Ветка**: `feature/user/add-status-flags`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_vip_customer, is_premium, is_beta_tester
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с статусными флагами
4. **Сервис**: Добавить методы для управления статусами (только для ADMIN)
5. **DTO**: Создать UpdateUserStatusDto
6. **Контроллер**: Добавить endpoint PATCH /users/{id}/status (ADMIN only)
7. **Тесты**: Тесты управления статусами
8. **Коммит**: `feat(user): add status flags (VIP, Premium, Beta) with admin controls`

#### Задача 2.3: Добавить флаги верификации
**Цель**: Добавить систему верификации email и телефона
**Ветка**: `feature/user/add-verification-flags`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_email_verified, is_phone_verified, email_verified_at, phone_verified_at
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с флагами верификации
4. **Сервис**: Добавить методы для верификации
5. **DTO**: Создать VerifyEmailDto, VerifyPhoneDto
6. **Контроллер**: Добавить endpoints для верификации
7. **Тесты**: Тесты процесса верификации
8. **Коммит**: `feat(user): add email and phone verification system`

### Фаза 3: Адреса пользователей

#### Задача 3.1: Создать таблицу user_addresses
**Цель**: Создать систему адресов пользователей
**Ветка**: `feature/user/create-address-system`

**План атомарной задачи**:
1. **Миграция**: Создать таблицу user_addresses с FK на users
2. **DB Runtime Model**: Создать db/models/user-address.ts и обновить types.ts
3. **Модель (Domain)**: Создать UserAddressModel с ассоциациями
4. **Сервис**: Создать UserAddressService с CRUD операциями
5. **DTO**: Создать CreateAddressDto, UpdateAddressDto
6. **Контроллер**: Создать UserAddressController с полным CRUD
7. **Тесты**: Полные тесты для системы адресов
8. **Коммит**: `feat(user): create user address management system`

#### Задача 3.2: Добавить поддержку адресов по умолчанию
**Цель**: Добавить логику адресов по умолчанию
**Ветка**: `feature/user/add-default-address-logic`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку is_default в user_addresses
2. **DB Runtime Model**: Обновить db/models/user-address.ts и types.ts
3. **Модель (Domain)**: Обновить UserAddressModel с логикой default
4. **Сервис**: Добавить методы setAsDefault, getDefaultAddress
5. **DTO**: Обновить DTO с флагом isDefault
6. **Контроллер**: Обновить endpoints для работы с default адресами
7. **Тесты**: Тесты логики default адресов
8. **Коммит**: `feat(user): add default address management logic`

### Фаза 4: Предпочтения пользователя

#### Задача 4.1: Добавить предпочтения темы и языка
**Цель**: Добавить персонализацию интерфейса
**Ветка**: `feature/user/add-user-preferences`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки theme_preference, default_language, timezone
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с предпочтениями
4. **Сервис**: Добавить методы для управления предпочтениями
5. **DTO**: Создать UpdatePreferencesDto
6. **Контроллер**: Добавить endpoint PATCH /users/preferences
7. **Тесты**: Тесты управления предпочтениями
8. **Коммит**: `feat(user): add theme and language preferences`

#### Задача 4.2: Добавить персональные переводы
**Цель**: Добавить систему персональных переводов
**Ветка**: `feature/user/add-custom-translations`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку translations (JSONB)
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/user.ts
3. **Модель (Domain)**: Обновить UserModel с переводами
4. **Сервис**: Добавить методы для работы с переводами
5. **DTO**: Создать TranslationDto
6. **Контроллер**: Добавить endpoints для переводов
7. **Тесты**: Тесты системы переводов
8. **Коммит**: `feat(user): add custom translations system`

### Фаза 5: Индексы и производительность

#### Задача 5.1: Добавить индексы для производительности
**Цель**: Оптимизировать производительность запросов
**Ветка**: `feature/user/add-performance-indexes`

**План атомарной задачи**:
1. **Миграция**: Добавить все необходимые индексы для флагов
2. **DB Runtime Model**: Обновить db/models/user.ts (indexes) при необходимости
3. **Модель (Domain)**: Обновить модель с индексами/скоупами
4. **Сервис**: Добавить методы с использованием индексов
5. **Тесты**: Тесты производительности
6. **Коммит**: `perf(user): add database indexes for user flags and queries`

## Шаблон атомарной задачи

### Структура задачи
```markdown
#### Задача X.Y: [Название задачи]
**Цель**: [Что именно делаем]
**Ветка**: `feature/user/[kebab-case-name]`

**План атомарной задачи**:
1. **Миграция**: [Что меняем в БД]
2. **DB Runtime Model**: Обновить db/models/* и db/models/types.ts
3. **Модель (Domain)**: [Что обновляем в модели]
4. **Сервис**: [Какие методы добавляем]
5. **DTO**: [Какие DTO создаем/обновляем]
6. **Контроллер**: [Какие endpoints добавляем]
7. **Тесты**: [Какие тесты пишем]
8. **Коммит**: `[conventional commit message]`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена
```

## Порядок выполнения
1. Выполнять задачи строго по порядку (1.1 → 1.2 → 1.3 → 2.1...)
2. Каждая задача должна быть полностью завершена перед переходом к следующей
3. После каждой задачи создавать коммит
4. При возникновении проблем - откатываться к последнему стабильному состоянию

## Критерии качества атомарной задачи
- **Независимость**: задача может быть разработана отдельно
- **Тестируемость**: полное покрытие тестами
- **Документированность**: обновление Swagger
- **Безопасность**: соблюдение правил валидации и авторизации
- **Производительность**: учет индексов и оптимизации