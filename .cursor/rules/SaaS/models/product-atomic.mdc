# Система товаров (Product System) - Атомарный подход

## Контекст и цель
Поэтапная разработка системы товаров через атомарные задачи. Каждая задача включает полный цикл: миграция → модель → сервис → DTO → контроллер → тесты → коммит.

## Принципы атомарной разработки
- **Одна задача = один коммит** - каждая атомарная задача завершается коммитом
- **Полный цикл** - от модели до тестов включительно  
- **Независимость** - каждая задача может быть разработана отдельно
- **Инкрементальность** - постепенное наращивание функциональности

## Атомарные задачи для Product системы

### Фаза 1: Базовые поля товара

#### Задача 1.1: Добавить поле SKU
**Цель**: Добавить уникальный артикул товара
**Ветка**: `feature/product/add-sku-field`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку sku VARCHAR(100) UNIQUE в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с полем sku и валидацией
4. **Сервис**: Добавить методы для работы с SKU (поиск по SKU, генерация SKU)
5. **DTO**: Обновить CreateProductDto, UpdateProductDto с полем sku
6. **Контроллер**: Обновить endpoints для работы с SKU
7. **Тесты**: Unit тесты для сервиса + integration тесты для API
8. **Коммит**: `feat(product): add SKU field to products`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией уникальности SKU
- [ ] API endpoint работает с валидацией SKU
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена

#### Задача 1.2: Добавить поля цены (base_price, sale_price)
**Цель**: Добавить систему цен товара
**Ветка**: `feature/product/add-price-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки base_price, sale_price, currency в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с полями цены и валидацией
4. **Сервис**: Добавить методы для работы с ценами (расчет скидки, текущая цена)
5. **DTO**: Обновить DTO с полями цены
6. **Контроллер**: Обновить endpoints для работы с ценами
7. **Тесты**: Тесты валидации цен и расчетов
8. **Коммит**: `feat(product): add base price and sale price fields`

#### Задача 1.3: Добавить поля склада (stock, reserved_stock)
**Цель**: Добавить управление складскими остатками
**Ветка**: `feature/product/add-inventory-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки stock, reserved_stock в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с полями склада
4. **Сервис**: Добавить методы для работы со складом (резервирование, освобождение)
5. **DTO**: Обновить DTO с полями склада
6. **Контроллер**: Обновить endpoints для управления складом
7. **Тесты**: Тесты логики склада
8. **Коммит**: `feat(product): add stock and reserved stock fields`

### Фаза 2: Медиа и варианты

#### Задача 2.1: Добавить поле изображений
**Цель**: Добавить поддержку множественных изображений товара
**Ветка**: `feature/product/add-images-field`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку images TEXT[] в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с полем images
4. **Сервис**: Добавить методы для работы с изображениями
5. **DTO**: Обновить DTO с полем images
6. **Контроллер**: Обновить endpoints для работы с изображениями
7. **Тесты**: Тесты работы с изображениями
8. **Коммит**: `feat(product): add multiple images support`

#### Задача 2.2: Добавить поле вариантов (variants)
**Цель**: Добавить поддержку вариантов товара (размер, цвет)
**Ветка**: `feature/product/add-variants-field`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку variants JSONB в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с полем variants
4. **Сервис**: Добавить методы для работы с вариантами
5. **DTO**: Обновить DTO с полем variants
6. **Контроллер**: Обновить endpoints для работы с вариантами
7. **Тесты**: Тесты работы с вариантами
8. **Коммит**: `feat(product): add product variants support`

### Фаза 3: SEO и метаданные

#### Задача 3.1: Добавить SEO поля
**Цель**: Добавить поля для SEO оптимизации
**Ветка**: `feature/product/add-seo-fields`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки meta_title, meta_description, tags в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с SEO полями
4. **Сервис**: Добавить методы для работы с SEO
5. **DTO**: Обновить DTO с SEO полями
6. **Контроллер**: Обновить endpoints для работы с SEO
7. **Тесты**: Тесты SEO функциональности
8. **Коммит**: `feat(product): add SEO fields (meta title, description, tags)`

#### Задача 3.2: Добавить поля веса и размеров
**Цель**: Добавить физические характеристики товара
**Ветка**: `feature/product/add-physical-properties`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки weight, dimensions в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с физическими характеристиками
4. **Сервис**: Добавить методы для работы с характеристиками
5. **DTO**: Обновить DTO с характеристиками
6. **Контроллер**: Обновить endpoints для характеристик
7. **Тесты**: Тесты физических характеристик
8. **Коммит**: `feat(product): add weight and dimensions fields`

### Фаза 4: Статусы и флаги

#### Задача 4.1: Добавить статусы товара
**Цель**: Добавить систему статусов товара
**Ветка**: `feature/product/add-product-status`

**План атомарной задачи**:
1. **Миграция**: Добавить колонку status с ENUM в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с статусами
4. **Сервис**: Добавить методы для работы со статусами
5. **DTO**: Обновить DTO со статусами
6. **Контроллер**: Обновить endpoints для статусов
7. **Тесты**: Тесты системы статусов
8. **Коммит**: `feat(product): add product status system`

#### Задача 4.2: Добавить флаги товара (featured, new, bestseller)
**Цель**: Добавить маркетинговые флаги товара
**Ветка**: `feature/product/add-marketing-flags`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_featured, is_new, is_bestseller в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с маркетинговыми флагами
4. **Сервис**: Добавить методы для работы с флагами
5. **DTO**: Обновить DTO с флагами
6. **Контроллер**: Обновить endpoints для флагов
7. **Тесты**: Тесты маркетинговых флагов
8. **Коммит**: `feat(product): add marketing flags (featured, new, bestseller)`

#### Задача 4.3: Добавить флаги типа товара (digital, downloadable)
**Цель**: Добавить флаги типа товара
**Ветка**: `feature/product/add-product-type-flags`

**План атомарной задачи**:
1. **Миграция**: Добавить колонки is_digital, is_downloadable, requires_shipping в таблицу products
2. **DB Runtime Model**: Обновить db/models/types.ts и db/models/product.ts
3. **Модель (Domain)**: Обновить ProductModel с флагами типа
4. **Сервис**: Добавить методы для работы с типами товара
5. **DTO**: Обновить DTO с флагами типа
6. **Контроллер**: Обновить endpoints для типов товара
7. **Тесты**: Тесты типов товара
8. **Коммит**: `feat(product): add product type flags (digital, downloadable, shipping)`

### Фаза 5: Индексы и производительность

#### Задача 5.1: Добавить индексы для производительности
**Цель**: Оптимизировать производительность запросов товаров
**Ветка**: `feature/product/add-performance-indexes`

**План атомарной задачи**:
1. **Миграция**: Добавить индексы для часто используемых полей
2. **DB Runtime Model**: Обновить db/models/product.ts (indexes) при необходимости
3. **Модель (Domain)**: Обновить модель с индексами
4. **Сервис**: Оптимизировать запросы с использованием индексов
5. **Тесты**: Тесты производительности
6. **Коммит**: `perf(product): add database indexes for product queries`

## Шаблон атомарной задачи

### Структура задачи
```markdown
#### Задача X.Y: [Название задачи]
**Цель**: [Что именно делаем]
**Ветка**: `feature/product/[kebab-case-name]`

**План атомарной задачи**:
1. **Миграция**: [Что меняем в БД]
2. **DB Runtime Model**: Обновить db/models/* и db/models/types.ts
3. **Модель (Domain)**: [Что обновляем в модели]
4. **Сервис**: [Какие методы добавляем]
5. **DTO**: [Какие DTO создаем/обновляем]
6. **Контроллер**: [Какие endpoints добавляем]
7. **Тесты**: [Какие тесты пишем]
8. **Коммит**: `[conventional commit message]`

**Критерии готовности**:
- [ ] Миграция создана и протестирована
- [ ] Модель обновлена с валидацией
- [ ] API endpoint работает с валидацией
- [ ] Тесты покрывают новую функциональность
- [ ] Swagger документация обновлена
```

## Порядок выполнения
1. Выполнять задачи строго по порядку (1.1 → 1.2 → 1.3 → 2.1...)
2. Каждая задача должна быть полностью завершена перед переходом к следующей
3. После каждой задачи создавать коммит
4. При возникновении проблем - откатываться к последнему стабильному состоянию

## Критерии качества атомарной задачи
- **Независимость**: задача может быть разработана отдельно
- **Тестируемость**: полное покрытие тестами
- **Документированность**: обновление Swagger
- **Безопасность**: соблюдение правил валидации и авторизации
- **Производительность**: учет индексов и оптимизации