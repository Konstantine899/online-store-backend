# Test Coverage –¥–ª—è SaaS –ø—Ä–æ–¥—É–∫—Ç–æ–≤

## –ü–æ—á–µ–º—É –≤—ã—Å–æ–∫–∏–π coverage –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è SaaS

### üí∞ –ë–∏–∑–Ω–µ—Å-–ø—Ä–∏—á–∏–Ω—ã

**–†–µ–ø—É—Ç–∞—Ü–∏—è = Revenue**:

- –û–¥–∏–Ω –∫—Ä–∏—Ç–∏—á–Ω—ã–π –±–∞–≥ ‚Üí –æ—Ç—Ç–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Üí –ø–æ—Ç–µ—Ä—è MRR
- Downtime —Å—Ç–æ–∏—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥ (SLA penalties)
- –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤–ª–∏—è—é—Ç –Ω–∞ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏

**–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞**:

- SLA commitments –ø–µ—Ä–µ–¥ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ (99.9% uptime)
- –î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ (GDPR compliance)
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (PCI DSS –¥–ª—è payments)
- Audit trails –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

**–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ**:

- "Professionally tested" –≤ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
- –î–æ–≤–µ—Ä–∏–µ enterprise –∫–ª–∏–µ–Ω—Ç–æ–≤
- –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ security audits
- Certification ready (ISO 27001, SOC 2)

---

## Coverage Metrics Explained

### 1. Branches Coverage (–≤–µ—Ç–≤–ª–µ–Ω–∏—è)

```typescript
// –ö–∞–∂–¥–æ–µ if/else/switch —Å–æ–∑–¥–∞—ë—Ç –≤–µ—Ç–∫–∏
if (user.isActive) {
    // ‚Üê –í–µ—Ç–∫–∞ 1: true
    return 'active';
} else {
    // ‚Üê –í–µ—Ç–∫–∞ 2: false
    return 'inactive';
}

// 70% branches = –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å 7 –∏–∑ 10 –≤–µ—Ç–æ–∫
```

**–ß—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è**:

- ‚úÖ if/else statements
- ‚úÖ switch/case branches
- ‚úÖ Ternary operators (? :)
- ‚úÖ Logical operators (&& ||)

### 2. Functions Coverage (—Ñ—É–Ω–∫—Ü–∏–∏)

```typescript
function login() {} // ‚Üê –§—É–Ω–∫—Ü–∏—è 1
function logout() {} // ‚Üê –§—É–Ω–∫—Ü–∏—è 2
function refresh() {} // ‚Üê –§—É–Ω–∫—Ü–∏—è 3

// 70% functions = –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å 7 –∏–∑ 10 —Ñ—É–Ω–∫—Ü–∏–π
```

### 3. Lines Coverage (—Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞)

```typescript
1: const name = "John";   // ‚Üê –°—Ç—Ä–æ–∫–∞ 1
2: const age = 30;        // ‚Üê –°—Ç—Ä–æ–∫–∞ 2
3: console.log(name);     // ‚Üê –°—Ç—Ä–æ–∫–∞ 3

// 75% lines = 75% —Å—Ç—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å –≤ —Ç–µ—Å—Ç–∞—Ö
```

### 4. Statements Coverage (–≤—ã—Ä–∞–∂–µ–Ω–∏—è)

```typescript
const a = 1; // ‚Üê Statement 1
const b = 2; // ‚Üê Statement 2
return a + b; // ‚Üê Statement 3

// 75% statements = 75% –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–∏–ª–∏—Å—å
```

---

## –¶–µ–ª–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø—É –ø—Ä–æ–µ–∫—Ç–∞

| –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞                | Branches   | Functions  | Lines      | –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ                    |
| -------------------------- | ---------- | ---------- | ---------- | ------------------------------ |
| **Open Source –±–∏–±–ª–∏–æ—Ç–µ–∫–∞** | 85-95%     | 85-95%     | 90-98%     | –ü—É–±–ª–∏—á–Ω—ã–π API, –º–Ω–æ–≥–æ users     |
| **Banking/FinTech**        | 80-90%     | 80-90%     | 85-92%     | –î–µ–Ω—å–≥–∏, —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã, –∞—É–¥–∏—Ç      |
| **SaaS –ø—Ä–æ–¥—É–∫—Ç**           | **70-80%** | **70-80%** | **75-85%** | **‚Üê –í–ê–® –°–õ–£–ß–ê–ô**               |
| **Enterprise backend**     | 60-70%     | 60-70%     | 65-75%     | Internal, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–∞—è —Å—Ä–µ–¥–∞ |
| **Startup MVP**            | 40-50%     | 40-50%     | 45-55%     | –°–∫–æ—Ä–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ coverage       |
| **Prototype**              | 20-30%     | 20-30%     | 25-35%     | Proof of concept               |

---

## Per-Module Coverage Strategy

### CRITICAL Modules (85%+ coverage)

**–ü–æ—á–µ–º—É**: –ë–∞–≥–∏ –∑–¥–µ—Å—å = –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏/–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏

```javascript
'./src/infrastructure/services/auth/**/*.ts': {
    branches: 85,
    functions: 85,
    lines: 90,
    statements: 90
}

'./src/infrastructure/common/guards/**/*.ts': {
    branches: 85,
    functions: 85,
    lines: 90,
    statements: 90
}

'./src/infrastructure/common/strategies/**/*.ts': {
    branches: 85,
    functions: 85,
    lines: 90,
    statements: 90
}
```

**–ú–æ–¥—É–ª–∏**:

- ‚úÖ Authentication (login, registration, password reset)
- ‚úÖ Authorization (guards, strategies, RBAC)
- ‚úÖ Payment processing
- ‚úÖ Security (rate limiting, validation, sanitization)

---

### HIGH Priority Modules (75-80% coverage)

**–ü–æ—á–µ–º—É**: –ë–∞–≥–∏ –∑–¥–µ—Å—å = –ø—Ä–æ–±–ª–µ–º—ã user experience/–¥–∞–Ω–Ω—ã–µ

```javascript
'./src/infrastructure/services/user/**/*.ts': {
    branches: 80,
    functions: 80,
    lines: 85,
    statements: 85
}

'./src/infrastructure/services/order/**/*.ts': {
    branches: 75,
    functions: 75,
    lines: 80,
    statements: 80
}
```

**–ú–æ–¥—É–ª–∏**:

- ‚úÖ User management
- ‚úÖ Order processing
- ‚úÖ Cart operations
- ‚úÖ Notifications

---

### MEDIUM Priority Modules (65-70% coverage)

**–ü–æ—á–µ–º—É**: –í–∞–∂–Ω–æ, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

```javascript
'./src/infrastructure/controllers/**/*.ts': {
    branches: 70,
    functions: 70,
    lines: 75,
    statements: 75
}

'./src/infrastructure/services/**/*.ts': {
    branches: 65,
    functions: 65,
    lines: 70,
    statements: 70
}
```

**–ú–æ–¥—É–ª–∏**:

- Controllers (—Ç–æ–Ω–∫–∏–π —Å–ª–æ–π)
- Generic services
- Repositories

---

### EXCLUDED (0% coverage required)

**–ü–æ—á–µ–º—É**: –ù–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é

```javascript
'./src/**/*.dto.ts': { /* all: 0 */ }
'./src/**/*.response.ts': { /* all: 0 */ }
'./src/**/*.interface.ts': { /* all: 0 */ }
'./src/**/*.module.ts': { /* all: 0 */ }
```

**–¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤**:

- DTO –∫–ª–∞—Å—Å—ã (—Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ validation)
- Response types (—Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ API)
- Interfaces (TypeScript compile-time)
- Module definitions (DI configuration)

---

## –ó–∞–∫–æ–Ω —É–±—ã–≤–∞—é—â–µ–π –æ—Ç–¥–∞—á–∏

```
Coverage    –£—Å–∏–ª–∏—è       ROI (–ø–æ–ª—å–∑–∞/–∑–∞—Ç—Ä–∞—Ç—ã)
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
0-30%       –ù–∏–∑–∫–∏–µ       ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—É—Ç–∏
30-50%      –°—Ä–µ–¥–Ω–∏–µ      ‚≠ê‚≠ê‚≠ê‚≠ê –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
50-70%      –í—ã—Å–æ–∫–∏–µ      ‚≠ê‚≠ê‚≠ê Edge cases
70-85%      –û–≥—Ä–æ–º–Ω—ã–µ     ‚≠ê‚≠ê –†–µ–¥–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
85-95%      –ë–µ–∑—É–º–Ω—ã–µ     ‚≠ê –ì—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
95-100%     –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ   - –ù–µ —Å—Ç–æ–∏—Ç –∑–∞—Ç—Ä–∞—Ç
```

**–ü—Ä–∞–≤–∏–ª–æ**: 70% ‚Üí 85% —Ç—Ä–µ–±—É–µ—Ç **–≤ 3-5 —Ä–∞–∑ –±–æ–ª—å—à–µ** —Ä–∞–±–æ—Ç—ã —á–µ–º 50% ‚Üí 70%

---

## Unit vs Integration Coverage

### Unit Tests (—Å –º–æ–∫–∞–º–∏)

**Coverage**: 20-30% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–¥–∞

**–ü–æ—á–µ–º—É –Ω–∏–∑–∫–∏–π**:

- –¢–µ—Å—Ç–∏—Ä—É—é—Ç —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏–∫—É –º–µ—Ç–æ–¥–∞
- –ù–µ –ø–æ–∫—Ä—ã–≤–∞—é—Ç integration paths
- –ù–µ —Ç–µ—Å—Ç–∏—Ä—É—é—Ç DB/HTTP layers

**–ü—Ä–∏–º–µ—Ä**:

```typescript
it('should calculate total', () => {
    const service = new OrderService(mockRepo);
    expect(service.calculateTotal([item1])).toBe(100);
});
```

**–ß—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è**: —Ç–æ–ª—å–∫–æ `calculateTotal()` –º–µ—Ç–æ–¥

---

### Integration Tests (—Ä–µ–∞–ª—å–Ω–∞—è –ë–î + HTTP)

**Coverage**: 40-60% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–¥–∞

**–ü–æ—á–µ–º—É –≤—ã—à–µ**:

- –í–µ—Å—å —Å—Ç–µ–∫: Controller ‚Üí Service ‚Üí Repository ‚Üí DB
- –†–µ–∞–ª—å–Ω—ã–µ HTTP requests
- –í–∞–ª–∏–¥–∞—Ü–∏—è, guards, pipes
- Error handling

**–ü—Ä–∏–º–µ—Ä**:

```typescript
it('should create order', async () => {
    const res = await request(app)
        .post('/orders')
        .set('Authorization', `Bearer ${token}`)
        .send(orderData)
        .expect(201);
});
```

**–ß—Ç–æ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç—Å—è**:

- ‚úÖ Controller endpoint
- ‚úÖ Auth guard
- ‚úÖ Role guard
- ‚úÖ DTO validation
- ‚úÖ Service business logic
- ‚úÖ Repository DB query
- ‚úÖ Response serialization

---

## –ß—Ç–æ –ù–ï –Ω—É–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

### 1. Declarative Code (–¥–µ–∫–ª–∞—Ä–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥)

```typescript
// DTO classes - —Ç–æ–ª—å–∫–æ –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è
export class CreateUserDto {
    @IsString()
    @IsEmail()
    email: string; // ‚Üê –ù–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
}

// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è –∫–æ—Å–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ API validation tests
```

### 2. Framework Code (–∫–æ–¥ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞)

```typescript
// NestJS decorators - —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º
@Controller('user')
@ApiTags('Users')
export class UserController {}
```

### 3. Configuration Files

```typescript
// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ runtime
export const config = {
    port: 5000,
    host: 'localhost',
};
```

### 4. Type Definitions

```typescript
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - compile-time –ø—Ä–æ–≤–µ—Ä–∫–∏
interface IUserService {
    createUser(dto: CreateUserDto): Promise<User>;
}
```

**–ò—Ç–æ–≥–æ**: ~30-40% –∫–æ–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!

---

## Test Isolation Best Practices

### –ü—Ä–æ–±–ª–µ–º–∞: Race Conditions

```typescript
// ‚ùå –ü–õ–û–•–û - —Ç–µ—Å—Ç—ã –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞
it('test 1', async () => {
    await UserModel.create({ email: 'test@test.com' });
});

it('test 2', async () => {
    const user = await UserModel.findOne({ email: 'test@test.com' });
    // ‚Üê test@test.com –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç test 1 –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤!
});
```

### –†–µ—à–µ–Ω–∏–µ 1: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

```typescript
// ‚úÖ –•–û–†–û–®–û - –ø–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è
describe('User Tests', () => {
    let transaction: Transaction;

    beforeEach(async () => {
        transaction = await sequelize.transaction();
    });

    afterEach(async () => {
        await transaction.rollback();
    });

    it('test 1', async () => {
        await UserModel.create(data, { transaction });
        // –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞—Ç–∏—Ç—Å—è
    });
});
```

### –†–µ—à–µ–Ω–∏–µ 2: Unique Test Data

```typescript
// ‚úÖ –•–û–†–û–®–û - –∫–∞–∂–¥—ã–π —Ç–µ—Å—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
const uniqueEmail = `test-${Date.now()}-${Math.random()}@example.com`;
await UserModel.create({ email: uniqueEmail });
```

### –†–µ—à–µ–Ω–∏–µ 3: Cleanup

```typescript
// ‚úÖ –•–û–†–û–®–û - —è–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
afterEach(async () => {
    await UserModel.destroy({ where: { email: testEmail } });
    await OrderModel.destroy({ where: { userId: testUserId } });
});
```

---

## SaaS-Specific Test Scenarios

### Security Tests (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!)

```typescript
describe('Security', () => {
    it('should block brute force login attempts');
    it('should prevent SQL injection in search');
    it('should sanitize XSS in user inputs');
    it('should validate file upload types');
    it('should rate limit API requests');
});
```

### Multi-Tenancy Tests (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)

```typescript
describe('Tenant Isolation', () => {
    it('TENANT_ADMIN cannot access other tenant data');
    it('should filter data by tenant_id automatically');
    it('should prevent cross-tenant resource access');
});
```

### Data Integrity Tests

```typescript
describe('Data Integrity', () => {
    it('should rollback on payment failure');
    it('should prevent negative balances');
    it('should maintain referential integrity');
    it('should handle concurrent updates correctly');
});
```

### Compliance Tests

```typescript
describe('GDPR Compliance', () => {
    it('should export user data on request');
    it('should anonymize user on deletion');
    it('should log consent changes');
});
```

---

## Coverage Tools & CI Integration

### Local Development

```bash
# –ü–æ–ª–Ω—ã–π coverage report
npm run test:cov
npm run test:cov:open  # –û—Ç–∫—Ä—ã—Ç—å HTML –æ—Ç—á—ë—Ç

# Coverage –ø–æ —Ç–∏–ø—É —Ç–µ—Å—Ç–æ–≤
npm run test:cov:unit
npm run test:cov:integration

# Watch mode —Å coverage
npm run test:watch -- --coverage
```

### CI/CD Pipeline

```yaml
# GitHub Actions
- name: Run tests with coverage
  run: npm run test:cov:integration

- name: Check coverage thresholds
  run: |
      if ! npm run test:cov:integration; then
        echo "‚ùå Coverage threshold not met"
        exit 1
      fi

- name: Upload coverage to Codecov
  uses: codecov/codecov-action@v3
  with:
      files: ./coverage/lcov.info
```

### Coverage Badges

```markdown
# README.md

[![Coverage](https://codecov.io/gh/org/repo/branch/main/graph/badge.svg)](https://codecov.io/gh/org/repo)

# –î–ª—è SaaS –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º
```

---

## –¢–∏–ø–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è

### ‚ùå –û—à–∏–±–∫–∞ 1: –¢–µ—Å—Ç—ã —Ä–∞–¥–∏ coverage

```typescript
// ‚ùå –ü–õ–û–•–û - –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π —Ç–µ—Å—Ç
it('should have property name', () => {
    expect(user).toHaveProperty('name');
});
```

```typescript
// ‚úÖ –•–û–†–û–®–û - —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏–∫—É
it('should validate email format', async () => {
    await expect(service.createUser({ email: 'invalid' })).rejects.toThrow(
        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
    );
});
```

### ‚ùå –û—à–∏–±–∫–∞ 2: –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases

```typescript
// ‚ùå –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ happy path
it('should create order', () => {
    const order = await service.create(validData);
    expect(order).toBeDefined();
});
```

```typescript
// ‚úÖ –¢–µ—Å—Ç–∏—Ä—É–µ–º edge cases
it('should reject negative quantity');
it('should reject out-of-stock products');
it('should handle concurrent order creation');
it('should rollback on payment failure');
```

### ‚ùå –û—à–∏–±–∫–∞ 3: Flaky tests

```typescript
// ‚ùå –ü–õ–û–•–û - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
it('should expire token', async () => {
    await sleep(1001); // –ú–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å –≤ –º–µ–¥–ª–µ–Ω–Ω–æ–º CI
    expect(token.isExpired()).toBe(true);
});
```

```typescript
// ‚úÖ –•–û–†–û–®–û - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ
it('should expire token', async () => {
    const expiredToken = createToken({ expiresAt: Date.now() - 1000 });
    expect(expiredToken.isExpired()).toBe(true);
});
```

---

## Coverage vs Quality

**Coverage –ù–ï —Ä–∞–≤–Ω–æ Quality!**

```
‚ùå 90% coverage —Å –ø–ª–æ—Ö–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏ < ‚úÖ 60% coverage —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
```

### –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:

‚úÖ **–ü–æ–Ω—è—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è**:

```typescript
it('should reject login after 5 failed attempts'); // ‚úÖ –Ø—Å–Ω–æ
vs;
it('test bruteforce'); // ‚ùå –ù–µ–ø–æ–Ω—è—Ç–Ω–æ
```

‚úÖ **–¢–µ—Å—Ç–∏—Ä—É—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –Ω–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é**:

```typescript
it('should send welcome email on registration'); // ‚úÖ Behaviour
vs;
it('should call emailService.send()'); // ‚ùå Implementation
```

‚úÖ **–ù–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ**:

```typescript
// ‚úÖ –ö–∞–∂–¥—ã–π —Ç–µ—Å—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º
beforeEach(() => {
    // Fresh setup
});
```

‚úÖ **–ü–æ–∫—Ä—ã–≤–∞—é—Ç edge cases**:

```typescript
// ‚úÖ –ù–µ —Ç–æ–ª—å–∫–æ happy path
it('should handle valid input');
it('should reject invalid input');
it('should handle concurrent access');
it('should recover from failures');
```

---

## Continuous Improvement Strategy

### –¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è ‚Üí –¶–µ–ª–µ–≤–∞—è

```
Week 0:  47% coverage  ‚Üí  Week 9:  75% coverage
         335 tests              469 tests
         15 failed              0 failed
```

### Incremental Approach

**–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –¥–æ—Å—Ç–∏—á—å 70% –∑–∞ —Ä–∞–∑!**

1. **Week 1-2**: –ò—Å–ø—Ä–∞–≤–∏—Ç—å broken tests (47% ‚Üí 50%)
2. **Week 3-4**: –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ (50% ‚Üí 60%)
3. **Week 5**: RBAC (60% ‚Üí 65%)
4. **Week 6-7**: Business logic (65% ‚Üí 72%)
5. **Week 8**: Configuration (72% ‚Üí 75%)
6. **Week 9**: E2E flows (75%)

**–ö–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é**: +5-10% coverage, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å

---

## Monitoring & Metrics

### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è SaaS:

```bash
# –õ–æ–∫–∞–ª—å–Ω–æ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
npm run test:cov

# –í CI - –∫–∞–∂–¥—ã–π PR
- name: Check coverage
  run: npm run test:cov:integration
```

### Dashboard –º–µ—Ç—Ä–∏–∫–∏:

- **Test count**: —Ç—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ (335 ‚Üí 469)
- **Pass rate**: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 100%
- **Coverage %**: —Ç—Ä–µ–Ω–¥ —Ä–æ—Å—Ç–∞ (47% ‚Üí 75%)
- **Test duration**: –Ω–µ –¥–æ–ª–∂–Ω–∞ —Ä–∞—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
- **Flaky rate**: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0%

### Alerts:

```yaml
# –£–ø–∞–ª coverage
if coverage < previous_coverage - 2%:
    block_pr: true
    message: 'Coverage —Å–Ω–∏–∑–∏–ª—Å—è –Ω–∞ ${delta}%'

# –ü–æ—è–≤–∏–ª–∏—Å—å failed tests
if failed_tests > 0:
    block_pr: true
    message: '${failed_tests} tests failing'

# Flaky tests
if test_retry_count > 0:
    warn: true
    message: 'Flaky test detected: ${test_name}'
```

---

## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã

### Code Review —á–µ–∫–ª–∏—Å—Ç:

**–î–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞**:

- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã unit —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
- [ ] –î–æ–±–∞–≤–ª–µ–Ω—ã integration —Ç–µ—Å—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö endpoints
- [ ] –ü–æ–∫—Ä—ã—Ç—ã edge cases –∏ error scenarios
- [ ] Coverage –Ω–µ —É–ø–∞–ª (–∏–ª–∏ –æ–±–æ—Å–Ω–æ–≤–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∞–¥)
- [ ] –¢–µ—Å—Ç—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ (–ø—Ä–æ—à–ª–∏ 3+ —Ä–∞–∑–∞)

**–î–ª—è –±–∞–≥—Ñ–∏–∫—Å–æ–≤**:

- [ ] –î–æ–±–∞–≤–ª–µ–Ω regression test (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –±–∞–≥)
- [ ] Test –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ —Ñ–∏–∫—Å–∞
- [ ] Coverage —É–ª—É—á—à–µ–Ω –∏–ª–∏ –Ω–µ —Ö—É–∂–µ

### Definition of Done:

–ö–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤—ã–º –∫–æ–≥–¥–∞:

1. ‚úÖ –í—Å–µ –ª–∏–Ω—Ç–µ—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç
2. ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç (0 failed)
3. ‚úÖ Coverage ‚â• threshold
4. ‚úÖ CI pipeline green
5. ‚úÖ PR approved by 2+ reviewers

---

## –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

### –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫:

```json
{
    "jest": "^29.x", // Test runner
    "supertest": "^6.x", // HTTP assertions
    "@nestjs/testing": "^10.x", // NestJS test utilities
    "ts-jest": "^29.x" // TypeScript transform
}
```

### –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

```json
{
    "@faker-js/faker": "^8.x", // Test data generation
    "jest-retry": "^1.x", // Retry flaky tests (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    "codecov": "^3.x" // Coverage reporting
}
```

---

## –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

**–í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã**:

- [Jest Best Practices](https://github.com/goldbergyoni/javascript-testing-best-practices)
- [NestJS Testing Documentation](https://docs.nestjs.com/fundamentals/testing)
- [Martin Fowler - Test Pyramid](https://martinfowler.com/bliki/TestPyramid.html)

**–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã**:

- `.cursor/rules/testing.mdc` - –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- `.cursor/rules/testing/testing.coverage.plan.mdc` - –ø–ª–∞–Ω —É–ª—É—á—à–µ–Ω–∏—è coverage
- `docs/ci-cd.mdc` - CI/CD –ø—Ä–æ—Ü–µ—Å—Å—ã

---

**Version**: 1.0
**Last Updated**: 2025-10-08
**Maintainer**: Development Team
