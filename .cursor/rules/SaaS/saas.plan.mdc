# SaaS Execution Plan (Binding)

binding: true
owner: platform
version: 1.0

execution_policy:
must_follow: true
allow_code_changes_only_after: "–û–¥–æ–±—Ä—è—é <TASK_ID>"
triggers: - "–ü–ª–∞–Ω–∏—Ä—É–π": update this file only - "–ü–æ–∫–∞–∂–∏ –∫–æ–¥ <TASK_ID>": show diffs/commands, no changes - "–û–¥–æ–±—Ä—è—é <TASK_ID>": implement exactly that task - "–ö–æ–º–º–∏—Ç <TASK_ID>": commit & prepare PR notes
constraints: - no public API changes without explicit approval - changes only within task files_scope - pass lints/tests before marking DoD done

roadmap:
epic: SAAS-CORE
description: Global roadmap for multi-tenant SaaS platform (universal, not tied to specific business domain)

references:

- ‚ö†Ô∏è –ê–†–•–ò–í: user.plan.mdc, user-atomic.plan.mdc, user.mdc –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ models/archive/ (–∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª–∏ —Å SaaS –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π)

# DEFAULT PRE-COMMIT WORKFLOW –¥–ª—è –≤—Å–µ—Ö SaaS core –∑–∞–¥–∞—á

default_pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (–∫—Ä–∏—Ç–∏—á–Ω—ã–π –º–æ–¥—É–ª—å: SaaS core/multi-tenancy)"
default_pre_commit_steps:

- "¬´–†–µ–≤—å—é¬ª ‚Üí tenant isolation, multi-tenancy logic, security"
- "¬´–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π¬ª ‚Üí DB queries, tenant scoping performance"
- "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
- "–¢–µ—Å—Ç—ã: tenant isolation tests, integration tests"
- "Coverage: SaaS core ‚â•80%"
- "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(saas): <TASK_ID> complete"

tasks:

- id: SAAS-001
  title: Enable multi-tenant core (DB + Middleware + Scope)
  status: completed
  branch: "feature/infra/SAAS-001/enable-multi-tenant-core"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-001"
  detailed_plan: "N/A (single epic, no atomic tasks)"
  work_in: "saas.plan.mdc"
  update_here: "After implementation complete"
  progress:
  completed: 1
  total: 1
  current_task: null
  goals:
    - Multi-tenant DB schema with tenant_id isolation
    - Tenant middleware with x-tenant-id header support
    - Repository-level tenant scoping enforcement
    - Swagger documentation for global tenant header
      pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (–∫—Ä–∏—Ç–∏—á–Ω—ã–π –º–æ–¥—É–ª—å: SaaS core/multi-tenancy)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí tenant isolation, multi-tenancy logic, security"
    - "¬´–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π¬ª ‚Üí DB queries, tenant scoping performance"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: tenant isolation tests, integration tests"
    - "Coverage: SaaS core ‚â•80%"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(saas): <TASK_ID> complete"
      files_scope:
    - "db/migrations/\*\*"
    - "src/infrastructure/common/middleware/\*\*"
    - "src/infrastructure/repositories/\*\*"
    - "src/main.ts"
    - "src/infrastructure/common/swagger/\*\*"
      steps:
    - create tenants and tenant_users migrations with indexes
    - add tenant_id to core tables + indexes + backfill
    - tenant middleware resolve by x-tenant-id or subdomain
    - enforce tenant filter in repositories via helper/scope
    - document global x-tenant-id header in Swagger
      dod:
    - migrations up/down succeed transactionally
    - deterministic backfill to default tenant
    - missing x-tenant-id -> 400; with header -> isolated data
    - integration tests green for isolation
    - Swagger documents x-tenant-id as global header
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-001"

- id: SAAS-002
  title: User module MVP cleanup (remove e-commerce hardcoded roles)
  status: completed
  branch: "feature/user/SAAS-002/user-mvp-cleanup"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-002"
  detailed_plan: "N/A (single epic, no atomic tasks)"
  work_in: "saas.plan.mdc"
  update_here: "After implementation complete"
  progress:
  completed: 1
  total: 1
  current_task: null
  goals:
    - Remove e-commerce specific business flags from User model
    - Keep universal lifecycle flags (active/blocked/verified)
    - Clean up endpoints and tests for removed features
    - Update Swagger documentation
      context: |
      –¶–ï–õ–¨: –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å User –º–æ–¥—É–ª—å –∏–∑ e-commerce —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π SaaS –∫–æ–º–ø–æ–Ω–µ–Ω—Ç.
      –£–î–ê–õ–Ø–ï–ú: –•–∞—Ä–¥–∫–æ–¥ –±–∏–∑–Ω–µ—Å-—Ä–æ–ª–µ–π (VIP, Premium, Wholesale, Employee, Affiliate, HighValue, Beta)
      –û–°–¢–ê–í–õ–Ø–ï–ú: Lifecycle —Ñ–ª–∞–≥–∏ (active/blocked/suspended/deleted, email/phone verified)
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (User API refactoring)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí API contracts, breaking changes check"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: unit + integration tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(user): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/user/\*\*"
    - "src/infrastructure/services/user/\*\*"
    - "src/infrastructure/repositories/user/\*\*"
    - "src/infrastructure/dto/user/\*\*"
    - "src/domain/models/user.model.ts"
    - "src/domain/services/i-user-service.ts"
    - "src/domain/repositories/i-user-repository.ts"
    - "tests/integration/controllers/user/\*\*"
      steps:
    - "‚ùå –£–î–ê–õ–ò–¢–¨ 12 endpoints: /admin/vip/set|unset, /admin/premium/upgrade|downgrade, /admin/employee/set|unset, /admin/highvalue/set|unset, /admin/wholesale/set|unset, /admin/affiliate/set|unset"
    - "‚ùå –£–î–ê–õ–ò–¢–¨ 12 –º–µ—Ç–æ–¥–æ–≤ –∏–∑ UserService: setVip/unsetVip, upgradePremium/downgradePremium, setEmployee/unsetEmployee, setHighValue/unsetHighValue, setWholesale/unsetWholesale, setAffiliate/unsetAffiliate"
    - "‚ùå –£–î–ê–õ–ò–¢–¨ 12 –º–µ—Ç–æ–¥–æ–≤ –∏–∑ UserRepository: —Ç–æ –∂–µ —Å–∞–º–æ–µ"
    - "‚ùå –£–î–ê–õ–ò–¢–¨ 6 –ø–æ–ª–µ–π –∏–∑ UserModel: isVipCustomer, isPremium, isAffiliate, isEmployee, isHighValue, isWholesale"
    - "‚ùå –£–î–ê–õ–ò–¢–¨ 3 –ø–æ–ª—è –∏–∑ UpdateUserFlagsDto: isVipCustomer, isBetaTester, isPremium"
    - "‚ùå –£–î–ê–õ–ò–¢–¨ –∏–∑ getUserStats() –ø–æ–¥—Å—á–µ—Ç: vipUsers, premiumUsers, employees, affiliates, wholesaleUsers, highValueUsers"
    - "‚úÖ –û–°–¢–ê–í–ò–¢–¨ lifecycle endpoints: /admin/block|unblock, /admin/suspend|unsuspend, /admin/delete|restore, /verify/email|phone"
    - "‚úÖ –û–°–¢–ê–í–ò–¢–¨ lifecycle —Ñ–ª–∞–≥–∏: isActive, isBlocked, isSuspended, isDeleted, isEmailVerified, isPhoneVerified"
    - "‚úÖ –û–°–¢–ê–í–ò–¢–¨ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ñ–ª–∞–≥–∏: isNewsletterSubscribed, isMarketingConsent, isCookieConsent, isProfileCompleted, isTermsAccepted, isPrivacyAccepted, isAgeVerified, isTwoFactorEnabled"
    - "üîí –î–û–ë–ê–í–ò–¢–¨ BruteforceGuard –¥–ª—è verify routes (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)"
    - "üìù –û–ë–ù–û–í–ò–¢–¨ domain –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (IUserService, IUserRepository) - —É–±—Ä–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã"
    - "üß™ –û–ë–ù–û–í–ò–¢–¨ —Ç–µ—Å—Ç—ã: —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö endpoints"
      dod:
    - ‚ùå –í—Å–µ 12 –±–∏–∑–Ω–µ—Å-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö endpoints —É–¥–∞–ª–µ–Ω—ã
    - ‚ùå –í—Å–µ 36 –º–µ—Ç–æ–¥–æ–≤ —É–¥–∞–ª–µ–Ω—ã (12 –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä + 12 —Å–µ—Ä–≤–∏—Å + 12 —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
    - ‚ùå –í—Å–µ 9 –ø–æ–ª–µ–π —É–¥–∞–ª–µ–Ω—ã (6 –º–æ–¥–µ–ª—å + 3 DTO)
    - ‚úÖ Lifecycle endpoints —Ä–∞–±–æ—Ç–∞—é—Ç
    - ‚úÖ –ö–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (0 –æ—à–∏–±–æ–∫ TypeScript)
    - ‚úÖ –õ–∏–Ω—Ç–µ—Ä —É—Å–ø–µ—à–µ–Ω (0 –æ—à–∏–±–æ–∫ ESLint)
    - ‚úÖ Unit/integration —Ç–µ—Å—Ç—ã –∑–µ–ª—ë–Ω—ã–µ (–æ—Å—Ç–∞–≤—à–∏–µ—Å—è)
    - ‚úÖ Swagger –æ–±–Ω–æ–≤–ª—ë–Ω (—É–¥–∞–ª—ë–Ω–Ω—ã–µ endpoints –Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã)
    - üîí BruteforceGuard –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è /verify/\* routes
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-002"

- id: SAAS-003
  title: Catalog tenant filters and pagination
  status: completed
  branch: "feature/catalog/SAAS-003/tenant-pagination"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-003"
  detailed_plan: "N/A (single epic, Category + Brand done inline)"
  work_in: "saas.plan.mdc"
  update_here: "After implementation complete"
  progress:
  completed: 1
  total: 1
  current_task: null
  goals:
    - Add tenant_id filters to Category and Brand repositories
    - Implement pagination with { data, meta } contract
    - Add composite indexes (tenant_id, name) for performance
    - Validate pagination inputs using PaginationValidator
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Catalog refactoring)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí pagination contracts, tenant filters"
    - "¬´–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π¬ª ‚Üí DB queries, indexes"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: integration tests for pagination"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(catalog): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/product/\*\*"
    - "src/infrastructure/repositories/product/\*\*"
    - "src/infrastructure/services/product/\*\*"
    - "db/migrations/\*\*"
      steps:
    - add tenant filters to all product queries
    - ensure pagination contract { data, meta }
    - add required indexes for performance
      dod:
    - product lists are tenant-isolated and paginated
    - integration tests for success and error pass
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-003"

- id: SAAS-004
  title: Cart module (tenant isolation + guest support)
  status: pending
  branch: "feature/cart/SAAS-004/cart-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-004"
  detailed_plan: "models/cart.plan.mdc"
  atomic_tasks: "SAAS-004-00 –¥–æ SAAS-004-17 (18 –∑–∞–¥–∞—á)"
  work_in: "models/cart.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 18 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 18
  current_task: null
  goals:
    - Cart operations with tenant isolation
    - Guest cart support (session-based)
    - Authenticated user cart persistence
    - Cart expiration logic (30 days inactive)
    - Promo code application
    - Cart CRUD operations (add/remove/update/clear)
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Cart/checkout logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí cart logic, pricing, race conditions"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: cart integration + unit tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(cart): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/cart/\*\*"
    - "src/infrastructure/services/cart/\*\*"
    - "src/infrastructure/repositories/cart/\*\*"
    - "db/migrations/\*\*cart\*\*"
      steps:
    - create CartController with RBAC (CUSTOMER, STAFF roles)
    - migrations for carts + cart_items with tenant_id
    - CartService with add/remove/update/clear operations
    - guest cart support (session-based)
    - cart expiration logic (30 days inactive)
    - promo code application
      dod:
    - cart operations tenant-isolated
    - guest + authenticated carts work
    - unit + integration tests pass
    - Swagger documentation complete
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-004"

- id: SAAS-005
  title: Order management (tenant isolation + status tracking)
  status: pending
  branch: "feature/order/SAAS-005/order-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-005"
  detailed_plan: "models/order.plan.mdc"
  atomic_tasks: "SAAS-005-00 –¥–æ SAAS-005-18 (19 –∑–∞–¥–∞—á)"
  work_in: "models/order.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 19 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 19
  current_task: null
  goals:
    - Order state machine (pending ‚Üí paid ‚Üí processing ‚Üí shipped ‚Üí delivered)
    - Tenant-isolated order management
    - Order cancellation and refund logic
    - Order status history tracking
    - Admin order management
    - Order statistics per tenant
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Order/checkout logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí order state machine, payment integration"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: order workflow tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(order): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/order/\*\*"
    - "src/infrastructure/services/order/\*\*"
    - "src/infrastructure/repositories/order/\*\*"
    - "db/migrations/\*\*order\*\*"
      steps:
    - OrderController with RBAC
    - migrations for orders + order_items + order_status_history with tenant_id
    - order state machine (pending ‚Üí paid ‚Üí processing ‚Üí shipped ‚Üí delivered)
    - order cancellation logic
    - order stats per tenant
      dod:
    - orders tenant-isolated
    - status transitions validated
    - integration tests for full order flow
    - admin can manage all tenant orders
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-005"

- id: SAAS-006
  title: Payment integration (Stripe/PayPal + tenant config)
  status: pending
  branch: "feature/payment/SAAS-006/payment-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-006"
  detailed_plan: "models/payment.plan.mdc"
  atomic_tasks: "SAAS-006-00 –¥–æ SAAS-006-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/payment.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Multi-gateway support (Stripe, PayPal)
    - Tenant-specific payment configs (API keys per tenant)
    - Payment webhooks handling
    - Refund and chargeback processing
    - Payment transaction history
    - Idempotency guarantees
      pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (Payment/—Ñ–∏–Ω–∞–Ω—Å—ã)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí payment security, idempotency, webhooks"
    - "¬´–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π¬ª ‚Üí payment gateway retry logic"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: payment mocks + integration"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(payment): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/services/payment/\*\*"
    - "src/infrastructure/controllers/payment/\*\*"
    - "db/migrations/\*\*payment\*\*"
      steps:
    - payment gateway abstraction (Stripe, PayPal)
    - tenant-specific payment config (API keys per tenant)
    - payment webhooks handling
    - refund logic
    - payment transaction history
      dod:
    - payments work with Stripe/PayPal
    - tenant-scoped payment configs
    - webhooks processed correctly
    - refunds work
    - idempotency guaranteed
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-006"

- id: SAAS-007
  title: Billing & Subscriptions (SaaS monetization)
  status: pending
  branch: "feature/billing/SAAS-007/billing-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-007"
  detailed_plan: "models/billing.plan.mdc"
  atomic_tasks: "SAAS-007-00 –¥–æ SAAS-007-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/billing.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Subscription plans (Free, Pro, Enterprise)
    - Tenant subscription management
    - Usage tracking (API calls, storage, users)
    - Invoicing and receipts generation
    - Upgrade/downgrade flow
    - Stripe Billing integration
      pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (Billing/revenue)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí subscription logic, billing cycles, invoices"
    - "¬´–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π¬ª ‚Üí billing calculations"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: billing workflow tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(billing): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/billing/\*\*"
    - "src/infrastructure/services/billing/\*\*"
    - "db/migrations/\*\*billing\*\*"
      steps:
    - subscription plans (Free, Pro, Enterprise)
    - tenant subscription management
    - usage tracking (API calls, storage, users)
    - invoicing + receipts
    - upgrade/downgrade flow
      dod:
    - subscription plans active
    - usage limits enforced
    - invoices generated
    - stripe billing integration
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-007"

- id: SAAS-008
  title: Rating & Review system (tenant isolation)
  status: pending
  branch: "feature/rating/SAAS-008/rating-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-008"
  detailed_plan: "models/rating.plan.mdc"
  atomic_tasks: "SAAS-008-00 –¥–æ SAAS-008-07 (8 –∑–∞–¥–∞—á)"
  work_in: "models/rating.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 8 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 8
  current_task: null
  goals:
    - Tenant-isolated product ratings
    - Rating validation (1-5 stars)
    - Verified purchase badges
    - Average rating calculation
    - Moderation workflow (approve/reject)
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Rating/review logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí rating validation, moderation"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: rating integration tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(rating): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/rating/\*\*"
    - "src/infrastructure/services/rating/\*\*"
    - "src/infrastructure/repositories/rating/\*\*"
      steps:
    - tenant_id filters in RatingRepository
    - rating CRUD with validation (1-5 stars)
    - verified purchase badges
    - moderation workflow (approve/reject)
      dod:
    - ratings tenant-isolated
    - average rating calculation correct
    - moderation works
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-008"

- id: SAAS-009
  title: Notification system (email/SMS/push)
  status: pending
  branch: "feature/notification/SAAS-009/notification-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-009"
  detailed_plan: "models/notification.plan.mdc"
  atomic_tasks: "SAAS-009-00 –¥–æ SAAS-009-06 (7 –∑–∞–¥–∞—á)"
  work_in: "models/notification.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 7 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 7
  current_task: null
  goals:
    - Multi-channel notifications (email, SMS, push)
    - Tenant-specific notification templates
    - Event-based triggers (order placed, payment received)
    - Notification history and delivery status
    - Unsubscribe management
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Notification service)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí notification templates, delivery"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: notification delivery tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(notification): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/services/notification/\*\*"
    - "src/infrastructure/controllers/notification/\*\*"
    - "db/migrations/\*\*notification\*\*"
      steps:
    - notification channels (email, SMS, push)
    - notification templates per tenant
    - event-based triggers (order placed, payment received)
    - notification history
    - unsubscribe logic
      dod:
    - email/SMS notifications work
    - templates customizable per tenant
    - delivery status tracked
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-009"

- id: SAAS-010
  title: Return & Exchange management
  status: pending
  branch: "feature/return/SAAS-010/return-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-010"
  detailed_plan: "models/return-exchange.plan.mdc"
  atomic_tasks: "SAAS-010-00 –¥–æ SAAS-010-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/return-exchange.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Return request creation and tracking
    - Return approval workflow
    - Refund processing integration
    - Exchange item management
    - Tenant-specific return policies
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Return logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí return policies, refund integration"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: return workflow tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(return): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/return/\*\*"
    - "src/infrastructure/services/return/\*\*"
    - "db/migrations/\*\*return\*\*"
      steps:
    - return request creation
    - return approval workflow
    - refund processing
    - exchange management
      dod:
    - returns tenant-isolated
    - refunds work
    - exchange flow complete
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-010"

- id: SAAS-011
  title: Review & Comment system
  status: pending
  branch: "feature/review/SAAS-011/review-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-011"
  detailed_plan: "models/review-comment.plan.mdc"
  atomic_tasks: "SAAS-011-00 –¥–æ SAAS-011-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/review-comment.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Product reviews with text and rating
    - Review comments and replies
    - Review helpfulness voting
    - Spam detection and moderation flags
    - Tenant-isolated reviews
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Review/comment logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí review moderation, spam detection"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: review tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(review): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/review/\*\*"
    - "src/infrastructure/services/review/\*\*"
      steps:
    - product reviews with text + rating
    - review comments (replies)
    - review helpfulness votes
    - spam/moderation flags
      dod:
    - reviews tenant-isolated
    - comments work
    - moderation functional
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-011"

- id: SAAS-012
  title: Shipping & Delivery management
  status: pending
  branch: "feature/shipping/SAAS-012/shipping-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-012"
  detailed_plan: "models/shipping.plan.mdc"
  atomic_tasks: "SAAS-012-00 –¥–æ SAAS-012-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/shipping.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Shipping zones configuration
    - Dynamic shipping rate calculation
    - Carrier integration (UPS, FedEx, DHL)
    - Tracking number management
    - Tenant-specific carrier settings
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Shipping logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí shipping calculations, carrier integration"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: shipping tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(shipping): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/services/shipping/\*\*"
    - "db/migrations/\*\*shipping\*\*"
      steps:
    - shipping zones configuration
    - shipping rate calculation
    - carrier integration (UPS, FedEx, etc)
    - tracking number management
      dod:
    - shipping rates calculated correctly
    - tracking works
    - tenant-specific carriers
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-012"

- id: SAAS-013
  title: Store/Tenant management API
  status: pending
  branch: "feature/store/SAAS-013/store-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-013"
  detailed_plan: "models/store.plan.mdc"
  atomic_tasks: "SAAS-013-00 –¥–æ SAAS-013-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/store.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Tenant CRUD operations
    - Tenant settings (branding, logo, domain)
    - Tenant onboarding flow
    - Feature flags per tenant
    - Custom domain support
      pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (Tenant management)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí tenant provisioning, settings isolation"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: tenant management tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(store): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/store/\*\*"
    - "src/infrastructure/services/store/\*\*"
      steps:
    - tenant CRUD operations
    - tenant settings (branding, logo, domain)
    - tenant onboarding flow
    - feature flags per tenant
      dod:
    - tenant self-service works
    - custom domains supported
    - settings isolated per tenant
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-013"

- id: SAAS-014
  title: Wishlist functionality
  status: pending
  branch: "feature/wishlist/SAAS-014/wishlist-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-014"
  detailed_plan: "models/wishlist.plan.mdc"
  atomic_tasks: "SAAS-014-00 –¥–æ SAAS-014-14 (15 –∑–∞–¥–∞—á)"
  work_in: "models/wishlist.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 15 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 15
  current_task: null
  goals:
    - Wishlist CRUD operations
    - Add/remove products from wishlist
    - Wishlist sharing functionality
    - Multiple wishlists per user
    - Tenant-isolated wishlists
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Wishlist logic)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí wishlist operations"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: wishlist tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(wishlist): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/wishlist/\*\*"
    - "src/infrastructure/services/wishlist/\*\*"
      steps:
    - wishlist CRUD operations
    - add/remove products
    - wishlist sharing
      dod:
    - wishlist tenant-isolated
    - sharing works
    - tests pass
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-014"

- id: SAAS-015
  title: Technical models (audit, logs, analytics)
  status: pending
  branch: "feature/technical/SAAS-015/technical-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-015"
  detailed_plan: "models/technical-models.plan.mdc"
  atomic_tasks: "SAAS-015-00 –¥–æ SAAS-015-19 (20 –∑–∞–¥–∞—á)"
  work_in: "models/technical-models.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 20 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 20
  current_task: null
  goals:
    - Audit trail for sensitive operations
    - Activity logs per tenant
    - Analytics dashboard data collection
    - Performance metrics tracking
    - Tenant-scoped logging
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Technical infrastructure)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí audit logging, analytics"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: audit tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(technical): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/services/audit/\*\*"
    - "src/infrastructure/services/analytics/\*\*"
      steps:
    - audit trail for sensitive operations
    - activity logs per tenant
    - analytics dashboard data
    - performance metrics
      dod:
    - audit logs work
    - analytics queryable
    - tenant-scoped
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-015"

- id: SAAS-016
  title: Product module (advanced catalog features)
  status: pending
  branch: "feature/product/SAAS-016/product-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-016"
  detailed_plan: "models/product.plan.mdc"
  atomic_tasks: "SAAS-016-00 –¥–æ SAAS-016-22 (23 –∑–∞–¥–∞—á–∏)"
  work_in: "models/product.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 23 –∞—Ç–æ–º–∞—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"
  progress:
  completed: 0
  total: 23
  current_task: null
  goals:
    - Product variants (size, color, etc)
    - Product properties and attributes
    - Inventory management and tracking
    - Advanced search and filters
    - Product import/export
    - Tenant-isolated products
      pre_commit_workflow: "–û–ë–´–ß–ù–´–ô (Product catalog)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí product variants, inventory"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: product tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(product): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/controllers/product/\*\*"
    - "src/infrastructure/services/product/\*\*"
      steps:
    - product variants (size, color)
    - product properties/attributes
    - inventory management
    - product search/filters
      dod:
    - variants work
    - inventory tracked
    - search functional
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-016"

- id: SAAS-017
  title: Role & Permission management (advanced RBAC)
  status: pending
  branch: "feature/role/SAAS-017/role-complete"
  workflow:
  start_trigger: "–ü–ª–∞–Ω–∏—Ä—É–π SAAS-017"
  detailed_plan: "models/role.plan.mdc"
  atomic_tasks: "SAAS-017-00 –¥–æ SAAS-017-20 (21 –∑–∞–¥–∞—á–∞)"
  work_in: "models/role.plan.mdc"
  update_here: "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö 21 –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∑–∞–¥–∞—á–∏"
  progress:
  completed: 0
  total: 21
  current_task: null
  goals:
    - Custom roles per tenant
    - Permission assignment and management
    - Role hierarchy support
    - Permission checks in guards
    - Tenant-scoped RBAC
    - Resource-based permissions
      pre_commit_workflow: "–¢–©–ê–¢–ï–õ–¨–ù–´–ô (Security/RBAC)"
      pre_commit_steps:
    - "¬´–†–µ–≤—å—é¬ª ‚Üí permission model, role hierarchy"
    - "¬´–ê–≤—Ç–æ—Ñ–∏–∫—Å¬ª ‚Üí linter/prettier"
    - "–¢–µ—Å—Ç—ã: RBAC tests"
    - "¬´–ö–æ–º–º–∏—Ç¬ª ‚Üí feat(role): <TASK_ID> complete"
      files_scope:
    - "src/infrastructure/services/role/\*\*"
    - "src/infrastructure/controllers/role/\*\*"
      steps:
    - custom roles per tenant
    - permission assignment
    - role hierarchy
    - permission checks in guards
      dod:
    - custom roles work
    - permissions enforced
    - tenant-scoped roles
      gate:
    - require: "–û–¥–æ–±—Ä—è—é SAAS-017"

notes:

- Any change to this plan must be requested via trigger "–ü–ª–∞–Ω–∏—Ä—É–π" and approved.
- For detailed atomic tasks, see models/\*.plan.mdc files (reference only, not binding)
