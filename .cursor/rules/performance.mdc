---
description: Рекомендации по производительности
globs:
alwaysApply: true
---

# Производительность

## База данных
- Избегать N+1: использовать `include/associations`, выбирать только нужные поля (`attributes`).
- Пагинация обязательна на списках: `page`/`limit`, лимит по умолчанию 5, максимум 100.
- Индексы: для FK, часто фильтруемых полей, сортировок; регулярно пересматривать селективность.
- Connection pool: на уровне Sequelize (env‑переменные для `pool.min/max`).
- Медленные запросы: логировать как `warn` с временем выполнения, инициировать ревизию индексов/запроса.

## HTTP слой
- Кэширование ответов: `Cache-Control`, `ETag` для статических/редко меняющихся данных.
- Компрессия ответов (gzip/br) на уровне сервера/Ingress.
- Ограничение payload: ограничить `body`/`file` размер; валидировать DTO на длину строк и массивов.
- Rate limiting уже есть: использовать профили (`login/refresh/registration`) и не повышать лимиты без причины.

## Кэш
- Кэшировать справочники и часто читаемые данные (in-memory/Redis).
- TTL по умолчанию 5–15 минут, инвалидация при изменениях (write‑through).
- Ключи Redis: `entity:{id}`, списки — `list:{scope}:{page}:{limit}:{filtersHash}`.

## Контроллеры/Сервисы
- Возвращать только необходимые поля (DTO/Response не тащат лишнее).
- Параллельные независимые вызовы — через `Promise.all`.
- Тяжёлые задачи (e-mail, отчет, перерасчет) — выносить в очередь/фон.

## Репозитории/Sequelize
- Не использовать `raw: true` без необходимости (теряется типобезопасность); но разрешено для лёгких read‑only списков.
- Явно указывать `attributes`, `where`, `order`, `limit`, `offset`.
- Для массовых операций — `bulkCreate`/`update` с батчами.

## Логирование и метрики
- Логировать длительность endpoint'ов (start/stop) — `info` для ключевых, `warn` при SLА превышении.
- Для «горячих» маршрутов — периодический профилинг, PR‑чек: время до/после изменений.

## Дополнительно
- Статические файлы: CDN/кеш на стороне клиента.
- Загрузка файлов: ограничить размер и тип, сохранять вне БД, отдавать по ссылке.
- Таймауты: разумные HTTP/DB таймауты; ретраи — точечные и ограниченные.
