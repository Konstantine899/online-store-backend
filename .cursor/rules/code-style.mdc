---
description: Правила стиля кода TypeScript/NestJS
globs:
alwaysApply: true
---

# Стиль кода

## TypeScript
- **Strict mode**: включен, без `any`, явные типы для публичных API
- **Интерфейсы**: префикс `I` для интерфейсов (`IUserService`)
- **Типы**: `declare readonly` в DTO, избегать `any`, использовать `unknown` при необходимости
- **Generic**: использовать для переиспользуемых компонентов

## Именование
- **Файлы**: `*.controller.ts`, `*.service.ts`, `*.repository.ts`, `*.dto.ts`, `*.response.ts`
- **Классы**: PascalCase (`UserController`, `AuthService`)
- **Методы**: camelCase, глаголы (`createUser`, `getProductList`)
- **Переменные**: camelCase, сущности (`userData`, `productList`)
- **Константы**: UPPER_SNAKE_CASE (`MAX_RETRY_COUNT`)
- **Интерфейсы**: префикс `I` (`IUserService`, `ICreateUserDto`)

## Импорты и экспорты
- **Порядок**: NestJS → внешние библиотеки → внутренние модули
- **Группировка**: пустая строка между группами
- **Barrel exports**: использовать `index.ts` для группировки экспортов
- **Относительные пути**: избегать, использовать алиасы `@app/*`

## NestJS специфика
- **Декораторы**: группировать по типу, порядок: `@ApiTags` → `@Controller` → `@HttpCode` → `@Roles` → `@UseGuards` → HTTP метод
- **Dependency Injection**: только через constructor
- **DTO**: `declare readonly` поля, валидация с русскими сообщениями
- **Response**: наследование от базовых классов, типизированные поля

## Обработка ошибок
- **Исключения**: не глушить, прокидывать выше или преобразовывать в доменные ошибки
- **NestJS exceptions**: использовать встроенные (`BadRequestException`, `NotFoundException`)
- **Сообщения**: на русском языке, конкретные описания
- **Логирование**: структурированные логи с correlation ID

## Контроль потока
- **Ранние возвраты**: проверка ошибок в начале функции
- **Избегать**: глубокой вложенности (>3 уровней)
- **Guard clauses**: использовать для упрощения логики
- **Async/await**: предпочитать Promise.all для параллельных операций

## Форматирование
- **Prettier**: `singleQuote: true`, `trailingComma: "all"`, `tabWidth: 4`
- **ESLint**: не отключать правила без обоснования
- **Отступы**: 4 пробела, не табы
- **Длина строки**: максимум 120 символов

## Комментарии
- **JSDoc**: для публичных методов и сложной логики
- **Inline**: объяснение неочевидных решений
- **TODO/FIXME**: с датой и автором
- **Удалять**: закомментированный код

## Тестирование
См. подробные правила в `testing.mdc`.
