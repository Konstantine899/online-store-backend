---
description: Архитектурные принципы и правила проекта
globs:
alwaysApply: true
---

# Архитектура проекта

## Архитектурные слои

### Domain Layer
- **Назначение**: интерфейсы, модели, DTO контракты, типы
- **Зависимости**: никаких внешних зависимостей от NestJS/Sequelize
- **Содержит**: `interfaces/`, `models/`, `dto/`, `types/`

### Infrastructure Layer  
- **Назначение**: реализация бизнес-логики, доступ к данным, конфигурация
- **Содержит**: `controllers/`, `services/`, `repositories/`, `config/`, `guards/`, `pipes/`, `filters/`

### Правила зависимостей
- **Контроллеры** → Сервисы → Репозитории → БД
- **Контроллеры** → DTO/Responses
- **Сервисы** → DTO/Models/Responses  
- **Репозитории** → Sequelize Models
- **❌ Запрещено**: импортировать из Infrastructure в Domain

## Контроллеры
- **Тонкие**: только транспорт/валидация/декораторы
- **DI**: все зависимости через constructor
- **Декораторы**: `@ApiTags`, `@HttpCode`, кастомные Swagger декораторы
- **Пример**: `@CreateUserSwaggerDecorator()`, `@ApiBearerAuth('JWT-auth')`

## Сервисы
- **Бизнес-логика**: вся основная логика приложения
- **Работа с данными**: через репозитории
- **Формирование ответов**: создание Response объектов и пагинации

## Репозитории
- **Только доступ к БД**: через Sequelize
- **Без доменной логики**: только CRUD операции
- **Транзакции**: по необходимости

## Валидация и DTO
См. `api.mdc` — правила DTO и валидации в контроллерах; см. также `security.mdc` — санитизация.

## Документация
См. `api.mdc` — Swagger, кастомные декораторы и защищённые маршруты.

## Пагинация
См. `api.mdc` — контракт `{ data, meta }`, `page/limit` и поля `MetaData`.

## Безопасность
См. `security.mdc` — JWT, роли, BruteforceGuard, CORS/headers.
