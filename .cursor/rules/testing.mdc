# Testing Standards and Guidelines

## Coverage Requirements

### Global Thresholds (CI gates):

```
Branches:   70% (current: 72.43%)
Functions:  60% (current: 62.07%)
Lines:      70% (current: 73.73%)
Statements: 70% (current: 73.73%)
```

**CI блокирует merge** если coverage падает ниже thresholds.

---

### Critical Modules (MUST HAVE ≥65-90%):

| Module                | Branches | Functions | Lines | Statements |
| --------------------- | -------- | --------- | ----- | ---------- |
| **Auth Services**     | 65%      | 75%       | 85%   | 85%        |
| **Security Guards**   | 35%      | 75%       | 60%   | 60%        |
| **Exception Filters** | 65%      | 75%       | 85%   | 85%        |
| **User Services**     | 80%      | 85%       | 85%   | 85%        |
| **Token Services**    | 75%      | 90%       | 90%   | 90%        |
| **Controllers**       | 10%      | 14%       | 45%   | 45%        |

**Note:** Controllers имеют conservative baseline (10-45%) для постепенного улучшения.

См. полную документацию: [docs/COVERAGE-THRESHOLDS.md](../../docs/COVERAGE-THRESHOLDS.md)

---

## Test Quality Standards

### Unit Tests

- ✅ Все services/pipes/guards покрыты unit tests
- ✅ Моки для всех внешних зависимостей
- ✅ Без доступа к БД/файлам/сети
- ✅ Быстрые (<5s timeout)
- ✅ AAA pattern (Arrange → Act → Assert)

### Integration Tests

- ✅ Все controllers/repositories покрыты integration tests
- ✅ Реальная БД (миграции + seeds)
- ✅ HTTP layer через supertest
- ✅ Timeout 30s
- ✅ Proper cleanup (afterEach/afterAll)

### Test Coverage Requirements

- ✅ Негативные сценарии обязательны:
    - 400 Bad Request (validation errors)
    - 401 Unauthorized (no auth)
    - 403 Forbidden (insufficient permissions)
    - 404 Not Found (resource not found)
    - 409 Conflict (unique constraint, race conditions)
    - 429 Too Many Requests (rate limiting)

- ✅ Русские сообщения об ошибках
- ✅ Correlation ID в логах
- ✅ Structured error responses

---

## Security Testing Standards

### Password & Authentication (✅ COMPLETE)

```
✅ Password reset flow (12 tests)
✅ Token rotation (refresh token security)
✅ Session invalidation (admin password reset)
✅ Brute force protection (46 tests)
```

### Input Validation (✅ COMPLETE)

```
✅ SQL Injection prevention (6 tests)
✅ XSS prevention (6 tests)
✅ Path Traversal prevention (5 tests)
✅ CSRF protection (3 tests)
✅ Custom validators (40 tests)
```

### Authorization (✅ COMPLETE)

```
✅ RBAC tests (67 tests)
✅ Role hierarchy
✅ Permission matrix
✅ 401/403 distinction
✅ Multi-role support
```

### Race Conditions (✅ CRITICAL FIXES)

```
✅ Inventory overselling prevention (transaction + locking)
✅ Payment double-charge prevention (idempotency)
✅ Pessimistic locking для критичных операций
```

---

## Test Execution

### Локальная разработка

```bash
# Быстрые unit tests (без БД)
npm run test:unit

# Integration tests (требуется БД)
npm run test:integration

# Все тесты с coverage
npm run test:cov

# С HTML отчётом
npm run test:cov:open
```

### CI/CD

```bash
# CI режим (parallel execution)
npm run test:ci

# С coverage report для Codecov
npm run test:cov
```

**Execution Strategy:**

- **Локально**: Sequential (1 worker) для стабильности
- **CI**: Parallel (2-4 workers) для скорости

---

## Test Data Management

### Стратегия изоляции:

- ✅ **Unique users per test** (TestDataFactory)
- ✅ **Cleanup в afterEach** (TestCleanup utility)
- ✅ **Deterministic fixtures** (без случайных данных)
- ✅ **No shared state** между тестами

### Test Utilities:

```typescript
// tests/utils/test-data-factory.ts
TestDataFactory.createUserWithRole(app, 'ADMIN');
TestDataFactory.uniqueEmail();
TestDataFactory.uniquePhone();

// tests/utils/test-cleanup.ts
TestCleanup.cleanUsers(sequelize);
TestCleanup.cleanOrders(sequelize);
```

---

## Flaky Tests

**Status:** ~5% integration тестов могут быть нестабильны

**Причины:**

- Shared mutable state (users 13/14 в некоторых старых тестах)
- Parallel execution race conditions
- БД cleanup issues

**Mitigation:**

- ✅ `jest.retryTimes(1)` включён
- ✅ Новые тесты используют unique users (TestDataFactory)
- ✅ Documented в [docs/KNOWN_FLAKY_TESTS.md](../../docs/KNOWN_FLAKY_TESTS.md)

**Future:** Постепенная миграция старых тестов на unique users.

---

## Performance Testing

### Benchmarks (future):

- Response time для критичных endpoints
- Database query count
- Memory usage
- Concurrent requests handling

---

## Test Documentation

- [docs/TESTING.md](../../docs/TESTING.md) - Comprehensive testing guide
- [docs/COVERAGE-THRESHOLDS.md](../../docs/COVERAGE-THRESHOLDS.md) - Coverage configuration
- [docs/KNOWN_FLAKY_TESTS.md](../../docs/KNOWN_FLAKY_TESTS.md) - Known issues and workarounds
- [docs/SECURITY.md](../../docs/SECURITY.md) - Security testing practices

---

## Best Practices

### ✅ DO:

- Использовать TestDataFactory для тестовых данных
- Cleanup в afterEach/afterAll
- Mock внешние сервисы (email, SMS, payments)
- Тестировать негативные сценарии
- Русские сообщения об ошибках
- Correlation ID в логах

### ❌ DON'T:

- Shared mutable state между тестами
- Hardcoded user IDs (13/14)
- Time-based assertions (могут флапать)
- Игнорировать flaky tests (fix root cause)
- Пропускать cleanup

---

## Gradual Improvement Strategy

### Phase 1 (Current) - Baseline ✅

```
Global: 60-70%
Critical: 65-90%
Controllers: 10-45%
```

### Phase 2 (Next 3 months)

```
Controllers: → 20-60%
role.guard branches: → 50%+
Global: → 65-75%
```

### Phase 3 (6 months)

```
Controllers: → 40-70%
All critical: → 85%+
Global: → 75%+
```

**Don't lower thresholds** - improve test coverage instead!

---

## CI Integration

Coverage thresholds автоматически проверяются в CI:

```yaml
# .github/workflows/ci.yml
- name: Run tests with coverage
  run: npm run test:cov

- name: Check coverage thresholds
  # Fails if thresholds not met
```

**Result:** Merge блокируется если coverage regression detected.

---

## Contributing

При добавлении нового кода:

1. **Critical modules:** Maintain ≥85% coverage
2. **High priority:** Maintain ≥80% coverage
3. **Medium priority:** Maintain ≥40% coverage (gradual improvement)

**Workflow:**

1. Write tests FIRST (TDD) или сразу после implementation
2. Run `npm run test:cov` локально
3. Ensure thresholds met
4. CI will verify automatically

---

## Metrics Tracking

Current metrics (2025-10-11):

```
Total Tests: 868 (44 suites)
Pass Rate: 94.2% (815/868 passed)
Coverage: 73.73% lines, 72.43% branches
Duration: ~40s (all tests)
```

**Achievement:**

- Started: 335 tests, 47% coverage
- Now: 868 tests (+158%), 73.73% coverage (+57%)
- Quality: Production-ready ✅
