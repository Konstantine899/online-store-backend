---
description: Политика тестирования (расширенная, компактная)
globs:
alwaysApply: true
---

# Тестирование

## Уровни тестирования
- **Unit**: сервисы, пайпы, гварды; мок всех внешних зависимостей; без доступа к БД/файлам/сети.
- **Integration**: ORM/репозитории/контроллеры через реальный HTTP слой и тестовую БД (миграции + сиды).
- **E2E (опц.)**: сквозные сценарии (auth → корзина → заказ → оплата), только для ключевых флоу.

## Структура и именование
- **Файлы**: `*.unit.test.ts`, `*.integration.test.ts`, `*.e2e.test.ts`
- **Каталоги**: `tests/unit`, `tests/integration`, `tests/e2e`; общие хелперы — в `tests/setup/*`
- **Правило AAA**: Arrange → Act → Assert; один сценарий — один `it(...)`

## База данных (integration/e2e)
- **Подготовка**: чистая БД перед запуском; применять миграции и минимальные сиды
- **Изоляция**: транзакции с rollback на тест/сьют ИЛИ сброс данными сидов
- **Данные**: использовать фабрики/билдеры (не "магические" константы), фиксировать ожидания явно

## Моки и стабы
- **Unit**: мокать всё внешнее (`jest.fn()`, `jest.mock(...)`), без реального I/O
- **Integration**: реальная БД/ORM; мокать только внешние сети/провайдеры (email/SMS/payments)
- **E2E**: по возможности без моков, но допускается стаб внешних интеграций

## Покрытие и CI-гейты
- **Критичные модули** (auth, orders, payments, security): покрытие ≥ 80%
- **CI**: блокировать merge при падении `test:unit` и `test:integration`
- **На релизах**: `test:cov` + отчёт о покрытии (не снижать пороги для критичных модулей)

## Критерии качества тестов
- Чёткие названия тестов (что проверяется и при каком условии)
- Негативные кейсы обязательны (валидация 400, guard 401/403, 404, 429)
- Без скрытых зависимостей между тестами; без "спящих" ожиданий
- Явные ожидания по формату ответа/ошибок (русские сообщения, контракт ошибок)

## Производительность
- Параллелизация без гонок данных; аккуратно с глобальными `beforeAll/afterAll`
- Минимизировать "тяжёлые" сиды; переиспользовать фабрики вместо больших фикстур
- Время прохождения — часть критерия PR (не допускать деградаций без причины)

## Чек-лист PR (тесты)
- [ ] Добавлены unit‑тесты для новых сервисов/пайпов/гвардов
- [ ] Для новых endpoints/репозиториев — есть интеграционные тесты (успех + ошибки)
- [ ] Проверены негативные сценарии (валидация/guard/429/403/404)
- [ ] Покрытие критичных модулей не просело (< 80% недопустимо)
- [ ] Тесты стабильные (без флапов), не зависят от порядка выполнения
