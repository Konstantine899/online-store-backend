# БД и миграции

## Конфигурация и окружения
- Источник конфигурации приложения: `SequelizeModule.forRootAsync(SequelizeConfigService)`, `synchronize: false`, `autoLoadModels: true`, `charset: utf8mb4`, `collate: utf8mb4_0900_ai_ci`.
- Конфигурация для `sequelize-cli`: `db/config/database.ts`, .env — из `.migrate.env`.
- Все DB переменные валидируются через Joi в `AppModule`: `MYSQL_*`, `DIALECT`, `SQL_LOGGING`.
- Логирование SQL: управляется `SQL_LOGGING` (`true`/`false`) через env.

## Миграции
- Все изменения схемы — только через Sequelize migrations (никакого `synchronize: true`).
- Нейминг: `YYYYMMDDHHMMSS-action-entity` (пример: `20230602152742-create-product.ts`).
- Идемпотентность: миграции должны быть повторяемыми и откатываемыми.
- Rollback: каждая миграция обязана корректно откатывать изменения (`down` симметричен `up`).
- Индексы: добавлять для FK и часто фильтруемых колонок; проверять план запросов.

## Сиды (seed)
- В проде — только детерминированные, без случайных данных и «умной» логики.
- Порядок: роли → администратор → справочники.
- Идемпотентность: сиды должны быть безопасны к повторному выполнению (upsert/where not exists).

## Моделирование данных
- Внешние ключи: в миграциях явно задавать FK, каскады `ON UPDATE/ON DELETE` по требованиям.
- Типы и ограничения: NOT NULL, DEFAULT, UNIQUE — всегда явно.
- Названия полей: snake_case в БД; соответствие полей указано в моделях (sequelize-typescript).
- Индексация: составные индексы, селективность, регулярный аудит «медленных» запросов.

## Транзакции
- Использовать транзакции для операций, затрагивающих 2+ таблиц.
- В сервисах — `sequelize.transaction(...)` или `@Transaction()` (если используется).
- В сидерах и миграциях — оборачивать `up/down` в транзакцию (если диалект поддерживает).

## Политики разработки
- Миграции генерировать через `npm run db:migration:generate -- <name>` и дорабатывать вручную.
- Перед PR: `npm run db:build && npm run db:lint` для проверки сборки и линтинга db-кода.
- Перед деплоем: `db:migrate` в CI/CD; откат через `db:migrate:undo` при неуспехе релиза.
- Для тестов: отдельная БД/схема, миграции применяются на чистую базу.

## Резервное копирование и восстановление (ops)
- Перед мажорными миграциями — бэкап схемы и данных (инструмент БД).
- Восстановление: сценарий rollback + восстановление бэкапа — обязателен для больших релизов.
